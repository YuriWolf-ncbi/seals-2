#!/usr/bin/perl5.16

############################################################
#	Template:	0.2, May 02 2002
#	Parent Path:	/net/gloin/export/home/wolf/bin/???
############################################################

############################################################
#	System etc
############################################################
$Pver = "0.1";
$Pdat = "September 23 2004";

($Pnam) = ($0 =~ m/([^\/]+)$/);
($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

############################################################
#	Definitions
############################################################
$block = 80;
$idpad = 0;
$sloppy = 0;

############################################################
#	Global variables
############################################################
@lids;@lseq;

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam name [options]

seqrows to interleaved.

Options:

	-b=n		use blocks of n positions (default $block)

	-i=n		pad IDs by spaces to length n (<0 to truncate)

	-sloppy		skip test for sequence length and ID uniqueness
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
my_args(@ARGV);
-t STDIN and !@myGlobList and print $Instructions and exit 0;
push @myGlobList,"-" unless(-t STDIN);

$idpad = $myOptList{"i"} if($myOptList{"i"}>0);
$block = $myOptList{"b"} if($myOptList{"b"}>0);
$sloppy = 1 if(exists $myOptList{"sloppy"});

foreach my $name (@myGlobList){
 open HAND,"<$name" or die "Can't read \"$name\"";
 while(<HAND>){
  chomp;
  my ($sid,$seq)=split /\s+/;
  push @lids,$sid;
  push @lseq,$seq;
 }
 close HAND;
}

my $nseq = @lseq;
my $lali = length $lseq[0];

if($sloppy){
 for(my $i=1;$i<$nseq;$i++){
  $lali = length $lseq[$i] if((length $lseq[$i])> $lali);
 }
 for(my $i=0;$i<$nseq;$i++){
  $lseq[$i] .= "-" while((length $lseq[$i])< $lali)
 }
}else{
 my %names = ();
 for(my $i=0;$i<$nseq;$i++){
  die "sequence ID \"$lids[$i]\" is not unique" if($names{$lids[$i]});
  $names{$lids[$i]} = 1;
 }
 for(my $i=1;$i<$nseq;$i++){
  die "length of sequence #$i is not $lali" if((length $lseq[$i])!=$lali);
 }
}

if($idpad>0){
 for(my $i=0;$i<$nseq;$i++){
  $lids[$i] .= " " while((length $lids[$i])<$idpad);
 }
}

my $pbeg = 0;
while($lali){
 my $blen = ($lali<$block)?($lali):($block);
 for(my $i=0;$i<$nseq;$i++){
  my $frag = substr $lseq[$i],$pbeg,$blen;
  printf "%s%s%s\n",$lids[$i],($idpad>0)?" ":"\t",$frag;
 }
 print "\n";
 $pbeg += $blen;
 $lali -= $blen;
}

############################################################
#	max min
############################################################
sub max
{
 my $max = shift;
 while(@_){
  my $x = shift;
  $max = $x if($x>$max);
 }
 return $max;
}

sub min
{
 my $min = shift;
 while(@_){
  my $x = shift;
  $min = $x if($x<$min);
 }
 return $min;
}


############################################################
#	my_args
############################################################
sub my_args
{
 my $nop = scalar @_;
 for($i=0;$i<$nop;$i++){
  if($_[$i]=~m/^-[^=]+=$/){
   my $new = $_[$i].$_[$i+1];
   splice @_,$i,2,$new;
  }
 }
 foreach my $arg (@_){
  my ($opt) = ($arg =~ m/^-(\w+)/);
  my ($val) = ($arg =~ m/^-\w+=(.*)/);
  if($opt){
   $myOptList{$opt} = $val;
  }else{
   push @myGlobList,$arg;
  }
 }
}
