#!/usr/bin/perl5.16

############################################################
#	Template:	1.5, July 16, 2017
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
#use lib "/home/wolf/perl5/lib/perl5";
use lib $ENV{'PERL_LIB_PATH'};
use YIW::basic;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;
use Digest::MD5 qw/md5 md5_hex/;

our $Pver = "0.2";
our $Pdat = "February 10 2022";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
############################################################
#	Definitions
############################################################
my $modd = 0;
############################################################
#	Global variables
############################################################
my %halst;

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam fasta [options]

Reads sequences; passes the first instance of unique hash value.

Options:

	-dump		dump ID and md5 hash values
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option
if((lc $Base) eq "safe"){						# slow but safe
 while(1){
  my $bnum = int(rand(0x7fffffff));
  $Base = "tmp.$Pnam.$bnum";
  last if((glob "$Base.*")==0);
 }
}
# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$modd = 1 if(exists $myOptList{"dump"});

my $fseq = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); system $CMD if($DOIT);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);

{
 my $def = ""; my $seq = "";
 print STDERR "$Pnam:\tReading $fseq\n" if($VERBOSE);
 open HAND,"<$fseq" or die "$Pnam:\tCan't read \"$fseq\"";
 while(<HAND>){
  chomp;
  if(m/^>/){
   process_sequence(\$seq,\$def,\%halst) if($seq ne "" and $def ne "");
   $def = substr $_,1;
   $seq = "";
   next;
  }
  $seq .= $_;
 }
 close HAND;
 process_sequence(\$seq,\$def,\%halst) if($seq ne "" and $def ne "");
 printf STDERR "$Pnam:\t\t%s\tdistinct hash values\n",int_commify(scalar keys %halst) if($VERBOSE);
}

#---	clean ----------------------------------------------
#unlink <$Base.*> unless($DEBUG);


############################################################
#	process_sequence($rseq,$rdef,$rhas)
############################################################
sub process_sequence
{
 my $rseq = shift;
 my $rdef = shift;
 my $rhas = shift;

 $$rseq =~ tr/ \t//d;

 if($modd){
  my $hv = md5_hex($$rseq);
  my ($id) = ($$rdef =~ m/^(\S+)/);
  printf "%s\t%s\n",$id,$hv;
  return;
 }

 my $hv = md5($$rseq);

 return if($$rhas{$hv}>0);
 $$rhas{$hv} = 1;
 printf ">%s\n%s\n",$$rdef,$$rseq;
}
