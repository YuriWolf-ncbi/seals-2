#!/usr/bin/perl


############################################################
#	System etc
############################################################
$Pver = "0.1";
$Pdat = "June 01 2001";

($Pnam) = ($0 =~ m/([^\/]+)$/);
($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

############################################################
#	Definitions
############################################################

############################################################
#	Global variables
############################################################
@seq;$alilen;

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam seqrows [options]

Converts seqrows to columnar format.

Options:

	none
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
my_args(@ARGV);
-t STDIN and !@myGlobList and print $Instructions and exit 0;
push @myGlobList,"-" unless(-t STDIN);

foreach my $name (@myGlobList){
 open HAND,"<$name" or die "Can't read \"$name\"";
 while(<HAND>){
  chomp;
  my ($id,$sq) = split/\s+/;
  next unless(length $sq);
  if($alilen){
   die "Unequal sequence lengths at \"$id\": ".(length $sq)." vs $alilen" if((length $sq) != $alilen);
  }else{
   $alilen = length $sq;
  }
  push @seq,scalar(reverse $sq);
  print ">$id\n";
 }
 close HAND;
}

while($alilen){
 my $line = "";
 for(my $i=0;$i<@seq;$i++){
  $line .= chop $seq[$i];
 }
 print "$line\n";
 $alilen--;
}

############################################################
#	max min
############################################################
sub max
{
 my $max = shift;
 while(@_){
  my $x = shift;
  $max = $x if($x>$max);
 }
 return $max;
}

sub min
{
 my $min = shift;
 while(@_){
  my $x = shift;
  $min = $x if($x<$min);
 }
 return $min;
}


############################################################
#	my_args
############################################################
sub my_args
{
 my $nop = scalar @_;
 for($i=0;$i<$nop;$i++){
  if($_[$i]=~m/^-[^=]+=$/){
   my $new = $_[$i].$_[$i+1];
   splice @_,$i,2,$new;
  }
 }
 foreach my $arg (@_){
  my ($opt) = ($arg =~ m/^-(\w+)/);
  my ($val) = ($arg =~ m/^-\w+=(.*)/);
  if($opt){
   $myOptList{$opt} = $val;
  }else{
   push @myGlobList,$arg;
  }
 }
}
