#!/usr/bin/perl

############################################################
#	Template:	0.3, November 04 2004
#	Parent Path:	/net/gloin/export/home/wolf/bin/???
############################################################

############################################################
#	System etc
############################################################
$Pver = "0.1";
$Pdat = "November 15 2014";

($Pnam) = ($0 =~ m/([^\/]+)$/);
($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

$Ppid = $$;	# Process ID
############################################################
#	Definitions
############################################################
$icom = 0;
$ldelim = "\t";
$jdelim = "\t";
$kp = 1;

############################################################
#	Global variables
############################################################
@tabl;
@tkey;

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam table -k=n [options]

Reads the table, permutes the specified field, prints table

Options:

	-k=n		permute n-th field relative to the rest (default $kp)

	-s=\"delim\"	delimiters to split line (default \"\\t\")

	-j=\"delim\"	delimiter to join line (default \"\\t\")

	-comm=n		lines starting with \"\#\" (default - skip)
			1 - treat as normal
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
my_args(@ARGV);
-t STDIN and !@myGlobList and print $Instructions and exit 0;
push @myGlobList,"-" unless(-t STDIN);

$icom = int $myOptList{"comm"} if(int $myOptList{"comm"}>0);
$ldelim = $myOptList{"s"} if($myOptList{"s"} ne "");
$jdelim = $myOptList{"j"} if($myOptList{"j"} ne "");
$kp = int $myOptList{"k"} if(int $myOptList{"k"}>0);

#---	read the source table ------------------------------
foreach my $fnam (@myGlobList){
 print STDERR "$Pnam:\tReading $fnam\n";
 open HAND,"<$fnam" or die "Can't read \"$fnam\"";
 while(<HAND>){
  chomp;
  if(m/^\#/){ next if($icom>0);}
  push @tabl,$_;
  my @data = split/$ldelim/;
  push @tkey,$data[$kp-1];
 }
 close HAND;
}
	# printf STDERR "%d\t%d\n",(scalar @tabl),(scalar @tkey);

#---	permute key ----------------------------------------
permute_array(\@tkey);

#---	print table ----------------------------------------
for(my $i=0;$i<@tabl;$i++){
 my @data = split/$ldelim/,$tabl[$i];
 $data[$kp-1] = $tkey[$i];
 printf "%s\n",(join $jdelim,@data);
}

############################################################
#	permute_array($rarr)
############################################################
# "proper" permutation accorting to Knuth
sub permute_array
{
 my $rarr = shift;
 my $ndat = @$rarr;
 
 for(my $i=0;$i<$ndat;$i++){
  my $r = $i + rand($ndat-$i);
  my $tmp = $$rarr[$i];
  $$rarr[$i] = $$rarr[$r];
  $$rarr[$r] = $tmp;
 }
}

############################################################
#	max min
############################################################
sub max
{
 my $max = shift;
 while(@_){
  my $x = shift;
  $max = $x if($x>$max);
 }
 return $max;
}

sub min
{
 my $min = shift;
 while(@_){
  my $x = shift;
  $min = $x if($x<$min);
 }
 return $min;
}


############################################################
#	my_args
############################################################
sub my_args
{
 my $nop = scalar @_;
 for($i=0;$i<$nop;$i++){
  if($_[$i]=~m/^-[^=]+=$/){
   my $new = $_[$i].$_[$i+1];
   splice @_,$i,2,$new;
  }
 }
 foreach my $arg (@_){
  my ($opt) = ($arg =~ m/^-(\w+)/);
  my ($val) = ($arg =~ m/^-\w+=(.*)/);
  if($opt){
   $myOptList{$opt} = $val;
  }else{
   push @myGlobList,$arg;
  }
 }
}
