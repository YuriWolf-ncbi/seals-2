#!/usr/bin/perl

############################################################
#	Template:	1.5, July 16, 2017
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
#use lib "/home/wolf/perl5/lib/perl5";
use lib $ENV{'PERL_LIB_PATH'};
use YIW::basic;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "0.3";
our $Pdat = "August 09 2019";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $idwrd = 2;
my $delim = "[ ,;:|]";
my $method = "cluster";
my $ethr = 0.1;
my $sthr = 0.75;
my $cthr = 0.333;
my $mcov = "1";
my $mcls = "2";

my @alst = split //,"FFLLSSSSYYQQCCWWLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG";
my $anum = @alst;
my $lbad = 250;
my $ibad = "YIW_ETAOIN_SHRDLU";
############################################################
#	Global variables
############################################################

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam fastafile [options]

Run MMSEQ2 clustering

Options:

	-w=n		use n-th word of ID (default $idwrd; 0 - all)

	-s=x		clustering threshold (default $sthr)

	-e=x		e-value threshold (default $ethr)

	-c=x		coverage threshold (default $cthr)

	-lin		linclust (default \"$method\")

	-mcov=n		coverage mode (default $mcov)
			0 - on the longer sequences
			1 - on the target sequences
			2 - on the query sequences

	-mcls=n		clustering mode (default $mcls)
			0 - greedy set cover
			1 - connected component
			2 - greedy incremental

Use \"-mcov=1 -mcls=2\" combination

Use \"-lin\" with \"-s=x\" where x >= 0.75

Requirements:

	MMSEQ2, plenty of disk space
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,0);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option
if((lc $Base) eq "safe"){						# slow but safe
 while(1){
  my $bnum = int(rand(0x7fffffff));
  $Base = "tmp.$Pnam.$bnum";
  last if((glob "$Base.*")==0);
 }
}
# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$idwrd = int $myOptList{"w"} if(exists $myOptList{"w"});
$sthr = $myOptList{"s"} + 0 if($myOptList{"s"}>0);
$ethr = $myOptList{"e"} + 0 if($myOptList{"e"}>0);
$cthr = $myOptList{"c"} + 0 if($myOptList{"c"}>0);
$mcov = int $myOptList{"mcov"} if(exists $myOptList{"mcov"}); $mcov = "0" if($mcov==0);
$mcls = int $myOptList{"mcls"} if(exists $myOptList{"mcls"}); $mcls = "0" if($mcls==0);
$method = "linclust" if(exists $myOptList{"lin"});

my $fseq = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pname,$Ppid,"started") if($VERBOSE>1);

#---	extract sequences ----------------------------------
$CMD = "fake_gi $fseq -b=1 -p=\"yseq_id_\" > $Base.fa"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);

#---	inject ---------------------------------------------
my @fakeaa = ();
for(my $i=0;$i<$lbad;$i++){ push @fakeaa,$alst[int(rand($anum))];}
open HAND,">>$Base.fa" or die "$Pnam:\tCan't write \"$Base.fa\"";
printf HAND ">%s\n%s\n",$ibad,(join "",@fakeaa);
close HAND;

#---	read IDs -------------------------------------------
my %gi2id = ();
open HAND,"<$Base.fa" or die "$Pnam:\tCan't read \"$Base.fa\"";
while(<HAND>){
 chomp;
 my ($gi,$id) = m/>(\S+)\s+(\S+)/;
 next if($id eq "");
 $id = (split/$delim/,$id)[$idwrd-1] if($idwrd>0);
 $gi2id{$gi} = $id;
}
close HAND;
#printf STDERR "$Pnam:\t\t%d\tids\n",(scalar keys %gi2id);

#---	run ------------------------------------------------
$CMD = "mmseqs createdb $Base.fa $Base.db > /dev/null"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);

mkdir "$Base.tmp";

$CMD = "mmseqs $method $Base.db $Base.dx $Base.tmp --min-seq-id $sthr -c $cthr -e $ethr --cov-mode $mcov --cluster-mode $mcls > /dev/null"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);

$CMD = "mmseqs createtsv $Base.db $Base.db $Base.dx $Base.tab > /dev/null"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);

#---	read -----------------------------------------------
my %cldat = ();
open HAND,"<$Base.tab" or die "$Pnam:\tCan't read \"$Base.tab\"";
while(<HAND>){
 chomp;
 next if(m/^#/);
 my ($seq1,$seq2) = split/\t/;
 if($cldat{$seq1} eq ""){ my @tmp = (); $cldat{$seq1} = \@tmp;}
 my $rlst = $cldat{$seq1};
 push @$rlst,$seq2;
}
close HAND;

#---	print ----------------------------------------------
my $ncls = 0;
my $nsin = 0;
foreach my $seqx (sort { sort_arsize($a,$b,\%cldat)} keys %cldat){
 my $rlst = $cldat{$seqx};
 my @ilst = ();
 foreach my $gi (@$rlst){ push @ilst,$gi2id{$gi} if($gi ne $ibad);}
 if(@ilst>0){
  printf "%d\t%s\n",(scalar @ilst),(join " ",@ilst);
  $ncls++;
  $nsin++ if(@ilst<2);
 } 
}

#---	clean ----------------------------------------------
unless($DEBUG){
 $CMD = "rm -r $Base.*"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
}
#unlink <$Base.*> unless($DEBUG);

printf STDERR "$Pnam:\t\t%d\tclusters\n",$ncls;
printf STDERR "$Pnam:\t\t%d\tsingletons\n",$nsin;

############################################################
#	sort_arsize($xxxx)
############################################################
sub sort_arsize
{
 my $a = shift;
 my $b = shift;
 my $rdat = shift;

 my $rdaa = $$rdat{$a};
 my $rdab = $$rdat{$b};
 my $ndaa = @$rdaa;
 my $ndab = @$rdab;
 
 return $ndab<=>$ndaa if($ndaa!=$ndab);
 return $a<=>$b;
}


############################################################
#	template_function($xxxx)
############################################################
#sub template_function
#{
# my $xxxx = shift;
#}

