#!/usr/bin/perl

############################################################
#	Template:	1.5, August 09, 2018
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
use lib $ENV{'PERL_LIB_YIW'};
use YIW::basic;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "2.02";
our $Pdat = "September 20 2020";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $Basd = "";
while(1){
 my $r1 = 1 + int(rand(0x7ffffffd));
 $Basd = join ".",("d",$r1);
 last unless(-e $Basd);
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $dcor = ".";
my $sali = "sr";
my $fasta = "";
my $xcons = "";
my $athr = 0.01;
my $gcon = 0.499;
my $njob = 50;
my $dnam = "local";
my $neff = "";
my $nosge = 0;

############################################################
#	Global variables
############################################################
my %alst = ();

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam alilist [options]

Options:

	-d=dcore	directory with core alignments (default $dcor)

	-cdd		CDD-style alignments (FASTA, consensus)

	-sali=sali	alignment suffix (default $sali)

	-fasta		alignments in FASTA (default seqrows)

	-xcon		alignments have consensus named \"CONSENSUS\" as the 1st sequence

	-athr=x		alignment cleanup threshold (default $athr, <0 no)

	-gcon=x		consensus gap threshold (default $gcon)

	-n=dbname	new db name (default $dnam)

	-neff		output neff, do not make a database

	-nosge		do not run on SGE

Requirements:

	HHsuite, Wolf\'s scripts on path
	SGE
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option
if((lc $Base) eq "safe"){						# slow but safe
 while(1){
  my $bnum = int(rand(0x7fffffff));
  $Base = "tmp.$Pnam.$bnum";
  last if((glob "$Base.*")==0);
 }
}
# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$dcor = $myOptList{"dcor"} if($myOptList{"dcor"} ne "");	# alternative
$dcor = $myOptList{"d"} if($myOptList{"d"} ne "");
$sali = $myOptList{"sali"} if($myOptList{"sali"} ne "");
$fasta = "-fasta" if(exists $myOptList{"fasta"});
$xcons = "-xcon" if(exists $myOptList{"xcon"});
if(exists $myOptList{"cdd"}){
 $sali = "FASTA";
 $fasta = "-fasta";
 $xcons = "-xcon";
}
$athr = $myOptList{"athr"} + 0 if(exists $myOptList{"athr"});
$gcon = $myOptList{"gcon"} + 0 if(exists $myOptList{"gcon"});
$dnam = $myOptList{"n"} if($myOptList{"n"} ne "");
$neff = "-neff" if(exists $myOptList{"neff"});
$nosge = 1 if(exists $myOptList{"nosge"});

$athr = -1 if($xcons>0);					# alignmnt is sacred

my $flst = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pnam,"$Pnam\t$Ppid","started") if($VERBOSE>1);

#---	temp directory -------------------------------------
mkdir $Basd or die "Can't make \"$Basd\"";

#---	read list ------------------------------------------
print STDERR "$Pnam:\tReading $flst\n" if($VERBOSE);
open HAND,"<$flst" or die "$Pnam:\tCan't read \"$flst\"";
while(<HAND>){
 chomp;
 my ($name) = split/\s+/;
 $alst{$name} = 1;
}
close HAND;
printf STDERR "$Pnam:\t\t%s\talignments\n",int_commify(scalar keys %alst) if($VERBOSE);

#---	prepare commands -----------------------------------
open HANX,">$Base.cmd.lst" or die "Can't write \"$Base.cmd.lst\"";
open HANY,">$Base.lst" or die "Can't write \"$Base.lst\"";
foreach my $name (keys %alst){
 $CMD = "$Path/run_hhmakeone $name -d=$dcor $fasta $xcons -sali=$sali -athr=$athr -gcon=$gcon $neff -VERB=0 > $Basd/$name";
 printf HANX "%s\n",$CMD;
 printf HANY "%s/%s\n",$Basd,$name;
}
close HANY;
close HANX;

#---	run commands ---------------------------------------
if($nosge or (scalar keys %alst)<$njob){
 $CMD = "chmod a+x $Base.cmd.lst ; ./$Base.cmd.lst > /dev/null"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
}else{
 $CMD = "submitSGEfarm $Base.cmd.lst -bt=-4 -rand -work= 2 > /dev/null"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
}

#---	output ---------------------------------------------
if($neff eq ""){
 unlink <$dnam\_hhm.*>;
 $CMD = "ffindex_build -s $dnam\_hhm.ffdata $dnam\_hhm.ffindex -f $Base.lst"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
}else{
 foreach my $name (keys %alst){
  $CMD = "cat $Basd/$name"; $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
 }
}

#---	clean ----------------------------------------------
# unlink <$Base.*> unless($DEBUG);
unless($DEBUG){
 $CMD = "rm -r $Basd/ $Base.*"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
}

############################################################
#	template_function($xxxx)
############################################################
#sub template_function
#{
# my $xxxx = shift;
#}
