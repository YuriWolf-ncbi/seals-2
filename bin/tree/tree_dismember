#!/usr/bin/perl

############################################################
#	Template:	0.3, November 04 2004
#	Parent Path:	/net/gloin/export/home/wolf/bin/???
############################################################

############################################################
#	System etc
############################################################
$Pver = "0.2";
$Pdat = "July 27 2020";

($Pnam) = ($0 =~ m/([^\/]+)$/);
($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

$PID = $$;	# Process ID
############################################################
#	Definitions
############################################################
$idwrd = 1;
$delim = "[ ,;:|]";
$EPSILON = "0.000001";

$pows = 1;
$powp = -1;
$powl = 1/6;

$minl = 4;
$mins = 4;

$name = "subtree";
$stre = "tre";

$rsoft = "0";
$DEBUG = "0";

############################################################
#	Global variables
############################################################

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Pnam $Pver, $Pdat

$Pnam trefile [options]

Reads rooted trees in Newick format with species being part of
the leaf name; computes cut desirabilities as

D = (n/N)^pops * (n/p)^powp * (l/lmax)^powl

cuts and saves subtrees; prints out the list of subtrees

Options:

	-w=n		species name is word n (default $idwrd)

	-s=x		species name separator

	-pows=x		species coverage power (default $pows)

	-powp=x		paralogy power (default $powp)

	-powl=x		branch length power power (default $powl)

	-rsoft		"soft" option for root preference

	-mins=n		minimum number of species (default $mins)

	-minl=n		minimum number of leaves (default $minl)

	-n=x		output file name (default \"$name\")

	-suf=x		output file suffix (default \"$stre\")
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
my_args(@ARGV);
!@myGlobList and print $Instructions and exit 0;

#$flagi = 1 if(exists $myOptList{"int"});
#$flaga = int $myOptList{"agg"} if($myOptList{"agg"}>=1);
#$nrep = int $myOptList{"n"} if((int $myOptList{"n"})>0);
#$alpha10 = $myOptList{"alo"} if($myOptList{"alo"}>0 and $myOptList{"alo"}<1);
#$alpha90 = $myOptList{"ahi"} if($myOptList{"ahi"}>0 and $myOptList{"ahi"}<1);
#$desex = $myOptList{"p"} if($myOptList{"p"}>1);
#$qdes = $myOptList{"q"} if($myOptList{"q"}>0 and $myOptList{"q"}<1);
#$modl = int $myOptList{"l"} if((int $myOptList{"l"})>0);
#$mult = int $myOptList{"m"} if((int $myOptList{"m"})>0);
#$fnex = 1 if(exists $myOptList{"nex"});
#$fout = $myOptList{"t"} if($myOptList{"t"} ne "");
$idwrd = int $myOptList{"w"} if(exists $myOptList{"w"});
$delim = $myOptList{"s"} if($myOptList{"s"} ne "");
$name = $myOptList{"n"} if($myOptList{"n"} ne "");
$stre = $myOptList{"suf"} if($myOptList{"suf"} ne "");
$pows = $myOptList{"pows"}+0 if(exists $myOptList{"pows"});
$powp = $myOptList{"powp"}+0 if(exists $myOptList{"powp"});
$powl = $myOptList{"powl"}+0 if(exists $myOptList{"powl"});
$mins = int $myOptList{"mins"} if((int $myOptList{"mins"})>0);
$minl = int $myOptList{"minl"} if((int $myOptList{"minl"})>0);
$rsoft = 1 if(exists $myOptList{"rsoft"});
$DEBUG = 1 if(exists $myOptList{"DEBUG"});

$ftre = shift @myGlobList;

print STDERR "$Pnam:\tReading tree: $ftre\n";

my %tdat = ();
my $root = read_tree($ftre,\%tdat);

$ntre = 1;
while(1){
 	#printf "=== NTRE:\t%d\n",$ntre;
 count_species($root);
 
 branch_desirability($root,$root);
	print_tree($root,0) if($DEBUG);

 my ($nodc,$desi) = find_best_cut($root);
 	#printf "%d\tBest:\t%.4f\n",$ntre,$desi;
 
 if($desi<=0 or $$root{"scnt"}<$mins or $$root{"lcnt"}<$minl){
  cut_tree($root,"$name.xxx.$stre");
  print "$name.xxx\n";
  last;
 }

 my $enough = cut_tree($nodc,"$name.$ntre.$stre");
 print "$name.$ntre\n";
	#print_tree($root,0) if($enough==1);
 last if($enough);
 $ntre++;
 	#last if($ntre>10);
}

############################################################
#	count_species($rnod)
############################################################
sub count_species
{
 my $rnod = shift;

 my %slst = ();
 $$rnod{"spec"} = \%slst;
 my $rlst = $$rnod{"spec"};
 
 my $rdes = $$rnod{"d"};

 unless(@$rdes){			# terminal node
  my $spec = $$rnod{"n"};
  $spec = (split/$delim/,$spec)[$idwrd-1] if($idwrd>0);
  $$rlst{$spec} = 1;
  $$rnod{"lcnt"} = 1;
  $$rnod{"scnt"} = 1;
  return 0;
 }
 
 my $maxl = 0;
 for(my $i=0;$i<@$rdes;$i++){
  my $rnxt = $$rdes[$i];
  $maxb = count_species($rnxt);
  my $rlsn = $$rnxt{"spec"};
  foreach my $spec (keys %$rlsn){ $$rlst{$spec} += $$rlsn{$spec};}
  $maxl = $maxb if($maxb>$maxl);
 }
 $$rnod{"lcnt"} = 0;
 foreach my $spec (keys %$rlst){ $$rnod{"lcnt"} += $$rlst{$spec};}
 $$rnod{"scnt"} = scalar keys %$rlst;
 $maxl = $$rnod{"l"} if($$rnod{"l"}>$maxl);
 $$rnod{"lmax"} = $maxl;
 if($$rnod{"p"} eq ""){					# special for root
  if($rsoft){
   my $rmax = 0;
   for(my $i=0;$i<@$rdes;$i++){
    my $rnxt = $$rdes[$i];
    $rmax = $$rnxt{"l"} if($$rnxt{"l"}>$rmax);
   }
   $$rnod{"l"} = $rmax;
  }else{
   $$rnod{"l"} = $maxl;
  }
 }
 return $maxl;
}

############################################################
#	branch_desirability($rnod,$root)
############################################################
sub branch_desirability
{
 my $rnod = shift;
 my $root = shift;

 my $rdes = $$rnod{"d"};

 unless(@$rdes){			# terminal node
  return;
 }
 
 for(my $i=0;$i<@$rdes;$i++){
  my $rnxt = $$rdes[$i];
  branch_desirability($rnxt,$root);
 }
 $$rnod{"desi"} = calc_desire($$rnod{"scnt"},$$rnod{"lcnt"},$$root{"scnt"},$$rnod{"l"},$$root{"lmax"});
}

############################################################
#	find_best_cut($rnod)
############################################################
sub find_best_cut
{
 my $rnod = shift;
 
 my $rdes = $$rnod{"d"};

 unless(@$rdes){			# terminal node
  return ("",0);
 }
 
 my $nodc = $rnod;
 my $desi = $$rnod{"desi"};
 
 for(my $i=0;$i<@$rdes;$i++){
  my $rnxt = $$rdes[$i];
  my ($nnxt,$dnxt) = find_best_cut($rnxt);
  if($dnxt>=$desi){ $nodc = $nnxt; $desi = $dnxt;}
 }
 return ($nodc,$desi);
}


############################################################
#	cut_tree($nodc,$fnam)
############################################################
sub cut_tree
{
 my $nodc = shift;
 my $fnam = shift;
 
 write_tree($nodc,$fnam,0x02);
 
 return 1 if($$nodc{"p"} eq "");		# already at root
 
 $rnod = $$nodc{"p"};
 
 my $rdes = $$rnod{"d"};
 
 my @dlst = ();
 for(my $i=0;$i<@$rdes;$i++){
  my $rnxt = $$rdes[$i];
  push @dlst,$rnxt if($rnxt ne $nodc);		# cut node not needed
 }
 @$rdes = @dlst;				# new list of descendants

 return 0 if(@$rdes>1);				# still many descendants
 
 my $rnxt = $$rdes[0];				# the only descendant
 my $dnxt = $$rnxt{"d"};
 
 if(@$dnxt){
  @$rdes = @$dnxt;					# adopt grandchildren
  for(my $i=0;$i<@$rdes;$i++){
   my $rnxt = $$rdes[$i];
   $$rnxt{"p"} = $rnod;
  }
 }else{
  $$rnod{"d"} = "";
  $$rnod{"n"} = $$rnxt{"n"};				# take name
 }
 $$rnod{"l"} += $$rnxt{"l"} if($$rnod{"p"});	# update branch length unless root
 return 0;					# signal to continue
}

############################################################
#	calc_desire($nspe,$nlea,$tspe,$blen,$bmax)
############################################################
sub calc_desire
{
 my $nspe = shift;
 my $nlea = shift;
 my $tspe = shift;
 my $blen = shift;
 my $bmax = shift;

 #return (($nspe/$tspe)**$pows)*(($nlea/$nspe)**$powp);
 $tspe = 1 if($tspe<1); $nspe = 1 if($nspe<1); $bmax = 1 if($bmax<=0);
 return (($nspe/$tspe)**$pows)*(($nlea/$nspe)**$powp)*(($blen/$bmax)**$powl);
}

#***********************************************************
#	Basic tree reading/handling
#***********************************************************

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#	Basic Fields
# n	node name (must be defined at leaves) [string]
# d	list of descendants [reference to array of references]
# p	parent [reference]
# l	in-branch length [real number]
# b	bootstrap or label
# i	additional info
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

############################################################
#	read_tree($name,$rxxt)
#	November 29 2013
############################################################
sub read_tree
{
 my $name = shift;
 my $rxxt = shift;
 my $line = "";
 
 open HAND,"<$name" or die "Can't read \"$name\"";
 while(<HAND>){
  chomp;
  $line .= $_;
 }
 close HAND;
 
 cleanline_tree(\$line);
 
 parse_tree($rxxt,$line);
 return $rxxt;
}

############################################################
#	cleanline_tree($rlin)
#	November 29 2013
############################################################
sub cleanline_tree
{
 my $rlin = shift;

 $$rlin =~ s/^[^(]*//;			# clean leader
 $$rlin =~ s/;.*$//;			# clean trailer
 $$rlin =~ tr/ //d;			# clean spaces
 $$rlin =~ s/\):[0-9.eE+-]+$/\)/;	# clean terminal branch length
}

############################################################
#	parse_tree($rnod,$line)
#	April 04 2014
############################################################
sub parse_tree
{
 my $rnod = shift;
 my $ilin = shift;
 
 my $line = unwrap_line($ilin);		# strip (...)
 my @desc = split_line($line);		# parse descendants
 	#print "[ $line ]\n";
 	#for(my $i=0;$i<@desc;$i++){
 	# printf "\t[ %s ]\n",$desc[$i];
 	#}
 if(@desc==1){				# none - terminal node
  $$rnod{"n"} = $desc[0];
  return;
 }
 
 my @tmp = ();				# internal node - set up
 $$rnod{"d"} = \@tmp;			# an array of descendants
 my $rdes = $$rnod{"d"};
 
 for(my $i=0;$i<@desc;$i++){		# descendants - one by one...
  my %tmpn = ();
  push @$rdes,\%tmpn;				# record in parent
  #pure style
  #my ($trex,$lenn) = ($desc[$i] =~ m/^(.*):(\d+\.*\d*e*[-+]*\d*)$/);	# extract branch length
  #BEAST style
  	#printf "***%s***\n",$desc[$i];
  my ($trex,$lenx) = ($desc[$i] =~ m/^(.*):([^:]+)$/);			# before last ":", after
  $trex = $desc[$i] unless($trex ne "");			# no branch length
  	#printf "[%s|%s]\n",$trex,$lenx;
  my ($tren,$boot) = ($trex =~ m/^(\(.+\))([^)]+)$/);			# extract bootstrap or label
  $tren = $trex unless($tren ne "");					# no bootstrap or label
  my ($iadd,$lenn) = ($lenx =~ m/\[([^\]]+)\](\d+\.*\d*e*[-+]*\d*)/);	# extract info and branch length
  $lenn = $lenx unless($lenn ne "");					# no info
  $tmpn{"l"} = $lenn+$EPSILON*(0.5+rand()/2);	# record branch length
  $tmpn{"b"} = $boot;				# record bootstrap or label
  $tmpn{"i"} = $iadd;				# record additional info
  $tmpn{"p"} = $rnod;				# record parent node - just in case
  parse_tree(\%tmpn,$tren);			# go further down the tree
 }
}

############################################################
#	unwrap_line($line);
############################################################
sub unwrap_line
{
 my $line = shift;
 my $pbal = find_balance($line);
 if($pbal<0){ die "Unbalanced expression [$line]";}
 
 return $line if($pbal+1<length $line);		# not wrapped
 $line =~ s/^\s*\(//;
 $line =~ s/\)\s*$//;
 return $line;
}

############################################################
#	split_line($line);
############################################################
sub split_line
{
 my $line = shift;
 my @lout = ();
 while(length $line){
  my $pbal = find_balance($line);
  if($pbal<0){ die "Unbalanced expression [$line]";}
  push @lout,(substr $line,0,$pbal);	# left part
  $line = substr $line,$pbal+1;		# right part
 }
 return @lout;
}

############################################################
#	find_balance($line);
############################################################
sub find_balance
{
 my $line = shift;
 my $bal = 0;my $pos = 0;
 while($line=~m/(.)/g){
  if($1 eq ","){
   last if($bal==0);
  }elsif($1 eq "("){
   $bal++;
  }elsif($1 eq ")"){
   $bal--;
  }
  return -1 if($bal<0);		# -1 - unbalanced
  $pos++;
 }
 return -1 if($bal>0);		# -1 - unbalanced
 return $pos;
}

############################################################
#	write_tree($root,$name,$flag)
#	0x01	- processed names
#	0x02	- include lengths
#	0x04	- include bootstraps
#	December 19 2011
############################################################
sub write_tree
{
 my $rroo = shift;
 my $name = shift;
 my $flag = shift;
 
 my $line = write_tree_rec($rroo,$flag);
 open HANX,">$name" or die "Can't write \"$name\"";
 print HANX "$line;\n";
 close HANX;
}

############################################################
#	write_tree_rec($root,$flag)
#	December 19 2011
############################################################
# flag 0x01 - parse node labels
# flag 0x02 - lengths
# flag 0x04 - bootstrap/labels
sub write_tree_rec
{
 my $rnod = shift;
 my $flag = shift;
 my $rdes = $$rnod{"d"};
 my $line = "";
 
 unless(@$rdes){			# terminal node
  $line = $$rnod{"n"};
  $line = (split/$delim/,$line)[$idwrd-1] if($idwrd>0 and $flag&0x01);
  return $line;
 }

 for(my $i=0;$i<@$rdes;$i++){
  next if($$rdes[$i] eq "");
  $line .= "," if($line ne "");
  $line .= write_tree_rec($$rdes[$i],$flag);
  if($$rdes[$i]{"b"} ne "" and $flag&0x04){
   $line .= "|" if($$rdes[$i]{"n"} ne "");
   $line .= $$rdes[$i]{"b"};
  }
  $line .= ":".$$rdes[$i]{"l"} if($$rdes[$i]{"l"} ne "" and $flag&0x02);
 }
 $line = "(".$line.")";
 return $line;
}

############################################################
#	print_tree($rnod,$level)
############################################################
# not used - debugging procedure
sub print_tree
{
 my $rnod = shift;
 my $level = shift;
 
 my $blen = $$rnod{"l"};
 my $name = $$rnod{"n"};
 my $rdes = $$rnod{"d"};
 if($name ne ""){
  for(my $i=0;$i<$level;$i++){ print "\t";} print "$name\n";
 }else{
  for(my $i=0;$i<$level;$i++){ print "\t";} print "INTERNAL\n";
 }
 for(my $i=0;$i<$level;$i++){ print "\t";} printf "h= %s\n",$rnod;
 for(my $i=0;$i<$level;$i++){ print "\t";} printf "L= %.4f\n",$blen;
 for(my $i=0;$i<$level;$i++){ print "\t";} printf "M= %.4f\n",$$rnod{"lmax"};
 for(my $i=0;$i<$level;$i++){ print "\t";} printf "S= %d\n",$$rnod{"scnt"};
 for(my $i=0;$i<$level;$i++){ print "\t";} printf "P= %.4f\n",$$rnod{"lcnt"}/$$rnod{"scnt"};
 for(my $i=0;$i<$level;$i++){ print "\t";} printf "D= %.4f\n",$$rnod{"desi"};
 #foreach my $spec (keys %$rlst){
 # for(my $i=0;$i<$level;$i++){ print "\t";} printf "[%s]\n",$spec;
 #}
 #for(my $i=0;$i<$level;$i++){ print "\t";} printf "X= [%s]\n",$$rnod{"lab"};
 #my $rlst = $$rnod{"dis"};
 #foreach my $name (sort keys %$rlst){
 # my $deep = $$rlst{$name};
 # for(my $i=0;$i<$level;$i++){ print "\t";} printf "d= %.4f\t%s\n",$deep,$name;
 #}
 
 	#for(my $i=0;$i<$level;$i++){ print "\t";} printf "SL= %s\n",$rrsl;
 	#for(my $i=0;$i<$level;$i++){ print "\t";} printf "SR= %s\n",$rrsr;
 
 for(my $i=0;$i<@$rdes;$i++){ print_tree($$rdes[$i],$level+1);}
}

#***********************************************************
#	Dusty attic
#***********************************************************

############################################################
#	max min
############################################################
sub max
{
 my $max = shift;
 while(@_){
  my $x = shift;
  $max = $x if($x>$max);
 }
 return $max;
}

sub min
{
 my $min = shift;
 while(@_){
  my $x = shift;
  $min = $x if($x<$min);
 }
 return $min;
}


############################################################
#	my_args
############################################################
sub my_args
{
 my $nop = scalar @_;
 for($i=0;$i<$nop;$i++){
  if($_[$i]=~m/^-[^=]+=$/){
   my $new = $_[$i].$_[$i+1];
   splice @_,$i,2,$new;
  }
 }
 foreach my $arg (@_){
  my ($opt) = ($arg =~ m/^-(\w+)/);
  my ($val) = ($arg =~ m/^-\w+=(.*)/);
  if($opt){
   $myOptList{$opt} = $val;
  }else{
   push @myGlobList,$arg;
  }
 }
}
