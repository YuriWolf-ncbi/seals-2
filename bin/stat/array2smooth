#!/usr/bin/perl

############################################################
#	Template:	1.5, July 16, 2017
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
use lib $ENV{'PERL_LIB_YIW'};
use YIW::basic;
use YIW::stat;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "0.1";
our $Pdat = "Xxx 00 2017";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $fda1 = 1;
my $fda2 = 2;
my $ldxx = "";
my $icom = 1;
my $band = 0;
my $nout = 100;
my $icom = 1;
my $ldelim = "\\t";

############################################################
#	Global variables
############################################################
my @xdat = ();
my @ydat = ();
my @xout = ();
my @yout = ();

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam name [options]

Returns a Gaussian kernel-smoothed X-Y array.

Options:

	-d1=n		use n-th field as the X (default $fda1)

	-d2=n		use n-th field as the Y (default $fda2)

	-f=x		bandwidth (default 1/20 of the range)

	-n=n		n points in output (default $nout)
			1 - point-by-point output

	-nocomm		do NOT ignore lines starting with "#"

	-s="delim"	delimiters to split line (default "$ldelim")
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option
if((lc $Base) eq "safe"){						# slow but safe
 while((glob "$Base.*")>0){
  my $bnum = int(rand(0x7fffffff));
  $Base = "tmp.$Pnam.$bnum";
 }
}
# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$fda1 = int $myOptList{"d1"} if(int $myOptList{"d1"}>0);
$fda2 = int $myOptList{"d2"} if(int $myOptList{"d2"}>0);
$band = $myOptList{"f"} + 0 if($myOptList{"f"}>0);
$nout = int $myOptList{"n"} if(int $myOptList{"n"}>0);
$icom = 0 if(exists $myOptList{"nocomm"});
$ldelim = $myOptList{"s"} if($myOptList{"s"} ne "");

my $name = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pname,$Ppid,"started") if($VERBOSE>1);

#---	read data ------------------------------------------
print STDERR "$Pnam:\tReading $name\n" if($VERBOSE);
open HAND,"<$name" or die "$Pnam:\tCan't read \"$name\"";
while(<HAND>){
 chomp;
 next if(m/^\#/ and $icom);
 my @token = split/$ldelim/;
 push @xdat,($token[$fda1-1]+0);
 push @ydat,($token[$fda2-1]+0);
}
close HAND;
printf STDERR "$Pnam:\t\t%s\tpoints\n",int_commify(scalar @xdat) if($VERBOSE);

#---	smooth ---------------------------------------------
if($nout>=0){ $nout = int($nout);}
else{ $nout = @xdat;}
kernel_smooth_xy(\@xdat,\@ydat,\@xout,\@yout,$nout,$band);

#---	print ----------------------------------------------
for(my $i=0;$i<@xout;$i++){
 printf "%.5e\t%.5e\n",$xout[$i],$yout[$i];
}

#---	clean ----------------------------------------------
# unlink <$Base.*> unless($DEBUG);

############################################################
#	template_function($xxxx)
############################################################
#sub template_function
#{
# my $xxxx = shift;
#}
