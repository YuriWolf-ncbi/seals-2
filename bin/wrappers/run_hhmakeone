#!/usr/bin/perl5.16

############################################################
#	Template:	1.5, August 09, 2018
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
#use lib "/home/wolf/perl5/lib/perl5";
use lib $ENV{'PERL_LIB_PATH'};
use YIW::basic;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "2.01";
our $Pdat = "September 02 2020";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $dcor = ".";
my $sali = "sr";
my $fasta = "";
my $xcons = "";
my $athr = 0.01;
my $gcon = 0.499;
my $verylong = 100000;
my $neff = 0;

############################################################
#	Global variables
############################################################
my %alst = ();

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam aliname [options]

Options:

	-d=dcore	directory with core alignments (default $dcor)

	-cdd		CDD-style alignments (FASTA, consensus)

	-sali=sali	alignment suffix (default $sali)

	-fasta		alignments in FASTA (default seqrows)

	-xcon		alignments have consensus named \"CONSENSUS\" as the 1st sequence

	-athr=x		alignment cleanup threshold (default $athr, <0 no)

	-gcon=x		consensus gap threshold (default $gcon)

	-neff		output neff only

Requirements:

	HHsuite, Wolf\'s scripts on path
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option
if((lc $Base) eq "safe"){						# slow but safe
 while(1){
  my $bnum = int(rand(0x7fffffff));
  $Base = "tmp.$Pnam.$bnum";
  last if((glob "$Base.*")==0);
 }
}
# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$dcor = $myOptList{"dcor"} if($myOptList{"dcor"} ne "");	# alternative
$dcor = $myOptList{"d"} if($myOptList{"d"} ne "");
$sali = $myOptList{"sali"} if($myOptList{"sali"} ne "");
$fasta = "-fasta" if(exists $myOptList{"fasta"});
$xcons = "-xcon" if(exists $myOptList{"xcon"});
if(exists $myOptList{"cdd"}){
 $fasta = "-fasta";
 $xcons = "-xcon";
 $sali = "FASTA";
}
$athr = $myOptList{"athr"} + 0 if(exists $myOptList{"athr"});
$gcon = $myOptList{"gcon"} + 0 if(exists $myOptList{"gcon"});
$neff = 1 if(exists $myOptList{"neff"});

my $name = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pnam,"$Pnam\t$Ppid","started") if($VERBOSE>1);

#---	prepare commands -----------------------------------
print STDERR "$Pnam:\tProcessing $dcor/$name.$sali\n";
$CMD = "ali_prep4search $name -d=$dcor $fasta $xcons -athr=$athr -gcon=$gcon -sali=$sali -VERB=0 > $Base.$name.FASTA";
$CMD .= " ; hhmake -i $Base.$name.FASTA -id 100 -diff inf -M first -maxres $verylong -name $name -v 0 -o $Base.$name.hhm > /dev/null";

#---	run commands ---------------------------------------
print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);

#---	output ---------------------------------------------
$CMD = "cat $Base.$name.hhm";
$CMD .= " | nemp -r=\"^NEFF\\s+(\\S+)\" | tab_shuffle -l=1 -f=\"$name\\t%s\"" if($neff);
print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);

#---	clean ----------------------------------------------
unlink <$Base.*> unless($DEBUG);

############################################################
#	template_function($xxxx)
############################################################
#sub template_function
#{
# my $xxxx = shift;
#}
