#!/usr/bin/perl5.16

############################################################
#	Template:	0.2, May 02 2002
#	Parent Path:	/net/gloin/export/home/wolf/bin/???
############################################################

############################################################
#	System etc
############################################################
$Pver = "0.6";
$Pdat = "April 13 2020";

($Pnam) = ($0 =~ m/([^\/]+)$/);
($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

############################################################
#	Definitions
############################################################
$dmaxl = 0;
$ucase = 0;
$lcase = 0;
$chgap = 0;
$chdef = 0;
@cgood = (
	"ARNDCQEGHILKMFPSTWYVarndcqeghilkmfpstwyv",	# 0
	"BZXbzx",					# 1
	"\\-\\.",					# 2
	"\\*",						# 3
	"UOJuoj",					# 4
	"0123456789"					# 5
);
$chlev = @cgood;
@ngood = (
	"ATGCUatgcu",					# 0
	"RYWSMKrywsmk",					# 1
	"BDHVbdhv",					# 2
	"Nn",						# 3
	"\\-\\.",					# 4
	"0123456789"					# 5
);
$ntlev = -1;
$cfilt = "";
$crepl = "";
$lcut = 0;
$lbar = 0x7fffffff;
$nonred = 0;

############################################################
#	Global variables
############################################################
%lstn;

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam name [options]

Filter FASTA sequences at several levels of strictness.

Options:

	-l=n		restrict the charset at level n:
			0 - only 20 AAs
			1 - ambiguous chars allowed ($cgood[1])
			2 - gaps allowed ($cgood[2])
			3 - STOP allowed ($cgood[3])
			4 - other letters allowed ($cgood[4])
			5 - digits allowed ($cgood[5])
			6+ - no filtering (default)

	-n=n		restrict the charset at level n (overrides -l):
			0 - $ngood[0]
			1 - ambiguous pairs ($ngood[1])
			2 - ambiguous triples ($ngood[2])
			3 - ambiguous characters ($ngood[3])
			4 - gaps allowed ($ngood[4])
			5 - digits allowed ($ngood[5])
			6+ - no filtering (default)

	-g		convert gaps (all non-alpha) to "-"

	-u		convert sequence to uppercase

	-low		lowercase prohibited

	-d=n		restrict defline to n characters

	-lcut=n		drop sequences shorter than n

	-lbar=n		drop sequences longer than n

	-w		convert all non-alpha chars in ID to "_"

	-f		convert all non-alpha chars in defline to spaces

	-r=X		convert all prohibited chars in sequences to X
			(default delete)

	-nr		skip sequences with redundant IDs
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
my_args(@ARGV);
-t STDIN and !@myGlobList and print $Instructions and exit 0;
push @myGlobList,"-" unless(-t STDIN);

$dmaxl = $myOptList{"d"} if($myOptList{"d"}>0);
$chlev = $myOptList{"l"} if(exists $myOptList{"l"} and $myOptList{"l"}<$chlev);
$ntlev = $myOptList{"n"} if(exists $myOptList{"n"});
$ucase = 1 if(exists $myOptList{"u"});
$lcase = 1 if(exists $myOptList{"low"});
$chgap = 1 if(exists $myOptList{"g"});
$chsid = 1 if(exists $myOptList{"w"});
$chdef = 1 if(exists $myOptList{"f"});
$nonred = 1 if(exists $myOptList{"nr"});
$lcut = $myOptList{"lcut"} if($myOptList{"lcut"}>0);
$lbar = $myOptList{"lbar"} if($myOptList{"lbar"}>0);
$crepl = substr $myOptList{"r"},0,1 if($myOptList{"r"} ne "");

if($ntlev>=0){
 @cgood = @ngood;
 $chlev = $ntlev;
 $chlev = @cgood if($chlev>@cgood);
}

for(my $i=0;$i<=$chlev;$i++){ $cfilt .= $cgood[$i];}

foreach my $name (@myGlobList){
 my $savedel = $/;
 $/="\n>";
 open HAND,"<$name" or die "Can't read \"$name\"";
 while(<HAND>){
  chomp;
  my ($def,@rest)=split /\n+/;
  $def =~ s/^>*//;
  my ($id) = split/\s/,$def;
  $def = substr $def,0,$dmaxl if($dmaxl>0);
  my ($did) = ($def =~ m/^(\S+)/);
  my ($dex) = ($def =~ m/^\S+\s+(\S+.*)$/);
  $did =~ s/\W/_/g if($chsid);
  $dex =~ s/[^\w\s]+/ /g if($chdef);
  $def = $did." ".$dex;
  my $seq = join "",@rest;
  $seq =~ tr/ \t//d;
  $seq =~ s/[a-z]/$crepl/g if($lcase);
  if($chlev<@cgood){
   #$seq =~ tr/[^$cfilt]+/$crepl/g;
   $seq =~ s/[^$cfilt]/$crepl/g;
  }
  $seq = uc $seq if($ucase);
  $seq =~ s/\W/-/g if($chgap);
  my $len = length $seq;
  print ">$def\n$seq\n" if($len>=$lcut and $len<=$lbar and $lstn{$id}<=0);
  if($nonred){
   $lstn{$id} = 1;
  }
 }
 close HAND;
 $/=$savedel;
}

############################################################
#	max min
############################################################
sub max
{
 my $max = shift;
 while(@_){
  my $x = shift;
  $max = $x if($x>$max);
 }
 return $max;
}

sub min
{
 my $min = shift;
 while(@_){
  my $x = shift;
  $min = $x if($x<$min);
 }
 return $min;
}


############################################################
#	my_args
############################################################
sub my_args
{
 my $nop = scalar @_;
 for($i=0;$i<$nop;$i++){
  if($_[$i]=~m/^-[^=]+=$/){
   my $new = $_[$i].$_[$i+1];
   splice @_,$i,2,$new;
  }
 }
 foreach my $arg (@_){
  my ($opt) = ($arg =~ m/^-(\w+)/);
  my ($val) = ($arg =~ m/^-\w+=(.*)/);
  if($opt){
   $myOptList{$opt} = $val;
  }else{
   push @myGlobList,$arg;
  }
 }
}
