#!/usr/bin/perl

############################################################
#	Template:	1.5, August 09, 2018
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
use lib "/home/wolf/perl5/lib/perl5";
use YIW::basic;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;
use Digest::MD5 qw/md5_hex/;

our $Pver = "0.2";
our $Pdat = "August 21 2024";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $kk = 1;
my $nn = 1;
my $batch = 0;
my $fout = "data";
my $sout = "tab";
my $nbuf = 32768;
my $mcom = 0;

############################################################
#	Global variables
############################################################
my %lbuf;

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam infile -x=n -n=name [options]

Splits input into files, according to the key.

Names the files name.xx.tab

Options:

	-k=n		use column n as the key (default $kk)

	-x=n		take n hex characters from digest (default $nn)

	-bt=n		randomly disperse into n batches (default use key)

	-n=name		output file name (default $fout)

	-s=suff		output file suffix (default $sout)

	-b=n		buffer size (default $nbuf)

	-comm=n		comment mode (default ignore; 1 - treat as normal)
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option
if((lc $Base) eq "safe"){						# slow but safe
 while(1){
  my $bnum = int(rand(0x7fffffff));
  $Base = "tmp.$Pnam.$bnum";
  last if((glob "$Base.*")==0);
 }
}
# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$kk = int $myOptList{"k"} if(int $myOptList{"k"}>0);
$nn = int $myOptList{"x"} if(int $myOptList{"x"}>0 and int $myOptList{"x"}<=32);
$batch = int $myOptList{"bt"} if(int $myOptList{"bt"}>0);
$fout = $myOptList{"n"} if($myOptList{"n"} ne "");
$sout = $myOptList{"s"} if($myOptList{"s"} ne "");
$nbuf = int $myOptList{"b"} if(int $myOptList{"b"}>0);

# my $name = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pnam,"$Pnam\t$Ppid","started") if($VERBOSE>1);

#---	prepare --------------------------------------------
unlink <$fout.*.$sout> unless($DEBUG);

#---	read data ------------------------------------------
foreach my $xarg (@myGlobList){
 my @xglo = glob $xarg;
 foreach my $name (@xglo){
  open HAND,"<$name" or die "$Pnam:\tCan't read \"$name\"";
  while(<HAND>){
   chomp;
   next if(m/^#/ and $mcom==0);
   my $xv = 1;
   if($batch>0){
    $xv = 1 + int(rand($batch));
   }else{
    my @data = split/\t/;
    my $hv = md5_hex($data[$kk-1]);
    $xv = substr($hv,0,$nn);
   }
   	#printf "%s\t%s\t[%s]\n",$xv,$hv,$data[$kk-1];
   if($lbuf{$xv} eq ""){ my @tmp = (); $lbuf{$xv} = \@tmp;}
   my $rbuf = $lbuf{$xv};
   push @$rbuf,$_;
   	#printf "%s\t%d\n",$xv,(scalar @$rbuf);
   flush_buffer($rbuf,"$fout.$xv.$sout") if(@$rbuf>=$nbuf);
  }
  close HAND;
 }
}

#---	flush ----------------------------------------------
foreach my $xv (keys %lbuf){
 my $rbuf = $lbuf{$xv};
 flush_buffer($rbuf,"$fout.$xv.$sout") if(@$rbuf>0);
}

#---	clean ----------------------------------------------
# unlink <$Base.*> unless($DEBUG);

############################################################
#	flush_buffer($rbuf,$fnam)
############################################################
sub flush_buffer
{
 my $rbuf = shift;
 my $fnam = shift;
 open HANX,">>$fnam" or die "$Pnam:\tCan't write \"$fnam\"";
 foreach my $xx (@$rbuf){
  printf HANX "%s\n",$xx;
 }
 close HANX;
 @$rbuf = ();
}
