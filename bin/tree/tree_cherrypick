#!/usr/bin/perl

############################################################
#	Template:	1.5, August 09, 2018
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
use lib $ENV{'PERL_LIB_YIW'};
use YIW::basic;
use YIW::tree;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "0.1";
our $Pdat = "2024-09-27";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $nend = 3;
my $flst = 0;

############################################################
#	Global variables
############################################################

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam treefile [options]

Reads a rooted binary tree; reduces to $nend leaves by collapsing shortest cherries.

Options:

	-n=n		reduce to n leaves (default $nend)

	-lst		list selected leaves (default output tree)
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,0);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option

# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$nend = int $myOptList{"n"} if(int $myOptList{"n"}>=2);
$flst = 1 if(exists $myOptList{"lst"});

my $ftre = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pnam,"$Pnam\t$Ppid","started") if($VERBOSE>1);

#---	read tree ------------------------------------------
print STDERR "$Pnam:\tReading $ftre\n";
$root = read_newick($ftre);

#---	list nodes -----------------------------------------
my @lint = ();
my @llea = ();
list_tree_nodes($root,\@lint,\@llea);
my $ncur = @llea;
printf STDERR "$Pnam:\t\t%s\tleaves\n",int_commify($ncur);

#---	reduce set -----------------------------------------
while($ncur>$nend){
 reduce_cherry($root);
 $ncur--;
}

#---	output ---------------------------------------------
if($flst==0){
 write_newick($root,"-",2,$$root{"head"});
 exit;
}

@lint = ();
@llea = ();
list_tree_nodes($root,\@lint,\@llea);
for(my $i=0;$i<@llea;$i++){
 my $rnod = $llea[$i];
 print $$rnod{"n"}."\n";
}

#---	clean ----------------------------------------------
# unlink <$Base.*> unless($DEBUG);

############################################################
#	reduce_cherry($root)
############################################################
sub reduce_cherry
{
 my $root = shift;

 my @lche = ();

 find_cherries($root,\@lche);

 	#printf STDERR "%d\tcherries\n",(scalar @lche);

 my $mind = 1e300; my $minc = "";
 for(my $i=0;$i<@lche;$i++){
  my $rnod = $lche[$i];
  my $rdes = $$rnod{"d"};
  my $des0 = $$rdes[0];
  my $des1 = $$rdes[1];
  my $cdis = $$des0{"l"} + $$des1{"l"};
  if($cdis<$mind){ $mind = $cdis; $minc = $rnod;}
 }

 	#printf STDERR "%x\t%e\tchosen\n",$minc,$mind;
	
 my $rdes = $$minc{"d"};
 my $des0 = $$rdes[0];
 my $len0 = $$des0{"l"};
 my $des1 = $$rdes[1];
 my $len1 = $$des1{"l"};
 	#printf STDERR "\t%s\t%e\tpresent\n",$$des0{"n"},$len0;
 	#printf STDERR "\t%s\t%e\tpresent\n",$$des1{"n"},$len1;
 if($len0>$len1){
  $$minc{"n"} = $$des0{"n"};
  $$minc{"l"} += $len0;
 	#printf STDERR "\t\t%s\t%e\tremoved\n",$$des1{"n"},$len1;
 }else{
  $$minc{"n"} = $$des1{"n"};
  $$minc{"l"} += $len1;
 	#printf STDERR "\t\t%s\t%e\tremoved\n",$$des0{"n"},$len0;
 }
 delete $$minc{"d"};
}

############################################################
#	find_cherries($rnod,$rlst)
############################################################
sub find_cherries
{
 my $rnod = shift;
 my $rlst = shift;

 my $nlea = 0;
 
 my $rdes = $$rnod{"d"};

 for(my $i=0;$i<@$rdes;$i++){
  $ndes = $$rdes[$i];
  $rden = $$ndes{"d"};
  $nlea++ if(@$rden==0);
  find_cherries($ndes,$rlst);
 }
 push @$rlst,$rnod if($nlea==2 and @$rdes==2);
}
