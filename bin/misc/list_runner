#!/usr/bin/perl5.16

############################################################
#	Template:	0.8, February 03, 2015
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
$Pver = "0.7";
$Pdat = "June 18, 2022";

($Pnam) = ($0 =~ m/([^\/]+)$/);
($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

$Ppid = $$;	# Process ID
$Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
$CMD = "";
############################################################
#	Definitions
############################################################
$nested = 0;
$multit = 1;
$ldelim = "\\s+";
$modlf = 0;
$moden = 0;
$modeb = 0;
$modee = 0;
$moder = 1;		# run the commands

############################################################
#	Global variables
############################################################
$command;
@tlist;		# tokens
@llist;		# original lines (for $modlf)

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam name -c="cmd" [options]

Runs command "cmd" using tokens from the input to form the command line.

Options:

	-c="cmd"	the command to run

	-2=mode		run 2 nested cycles
		-2=0		single cycle (default)
		-2=1		all pairs [n*n]
		-2=2		all non-identical pairs [n*(n-1)]
		-2=3		all ordered pairs [n*(n-1)/2]

	-m=n		n-token mode (splits input line)
			overrides -2

	-d="delim"	delimiters to split line (default "\\s+")

	-lf		put lines one by one into special file "{@}";
			line number in {1} or {#}

	-n=n		ignore input; run tokens 1 to n
			(can use \"n1,n2\")

	-list		output commands instead of running them

Examples:

	$Pnam newnames.lst -c="bin/data_retrieve {1}"

	$Pnam lineage.lst -2=1 -c="bin/pairwise_blast {1} {2}"

	$Pnam prot2org.lst -m=2 -c="fastacmd -s {1} >> {2}.fa"

	$Pnam set.cls -lf -c="perl -pe 'tr/ /\\n/' {@} > {1}.lst"

	$Pnam xxx -n=100 -c="random_subset data.dat -b | array2stat > result.{1}.dat"
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
my_args(@ARGV);
-t STDIN and !@myGlobList and print $Instructions and exit 0;
push @myGlobList,"-" unless(-t STDIN);

$command = $myOptList{"c"} if($myOptList{"c"});
die "No command specified" unless($command);

$nested = $myOptList{"2"}+0 if($myOptList{"2"}>0);
$multit = $myOptList{"m"}+0 if($myOptList{"m"}>0);
$ldelim = $myOptList{"d"} if($myOptList{"d"} ne "");
if(exists $myOptList{"n"}){
 my ($n1,$n2) = split/,/,$myOptList{"n"};
 if($n2 eq ""){ $n2 = int($n1); $n1 = 1;}
 else{ $n1 = int($n1); $n2 = int($n2);}
 if($n2>$n1){ $moden = $n2 - $n1; $modeb = $n1; $modee = $n2;}
}
$moder = 0 if(exists $myOptList{"list"});
$moder = 0 if(exists $myOptList{"print"});
$modlf = 1 if(exists $myOptList{"lf"});

if($moden>0){
 for(my $k=$modeb,$i=1;$k<=$modee;$k++,$i++){
  my $cmd = $command;
  $cmd =~ s/\{1\}/$k/g;
  $cmd =~ s/\{\#\}/$i/g;
  just_do_it($cmd);
 }
 exit;
}

foreach my $name (@myGlobList){
 open HAND,"<$name" or die "Can't read \"$name\"";
 while(<HAND>){
  chomp;
  next if($_ eq "");					# no empty lines (?)
  push @llist,$_ if($modlf);
  my @token = split/$ldelim/;
  splice @token,$multit;
  push @tlist,\@token;
 }
 close HAND;
}

if($modlf>0){
 for(my $i=1;$i<=@llist;$i++){
  open HANX,">$Base.tmp" or die "$Pnam:\tCan't write \"$Base.tmp\"";
  printf HANX "%s\n",$llist[$i-1];
  close HANX;
  my $cmd = $command;
  $cmd =~ s/\{1\}/$i/g;
  $cmd =~ s/\{\#\}/$i/g;
  $cmd =~ s/\{\@\}/$Base.tmp/g;
  just_do_it($cmd);
 }
 unlink <$Base.*>;
 exit;
}

if($nested==0){
 for(my $i=0;$i<@tlist;$i++){
  my $cmd = $command;
  my $j = $i+1; $cmd =~ s/\{\#\}/$j/g;
  my $rtl = $tlist[$i];
  for(my $k=1;$k<=$multit;$k++){ $cmd =~ s/\{$k\}/$$rtl[$k-1]/g;}
  just_do_it($cmd);
  #print "[ $cmd ]\n";
 }
}else{
 for(my $i=0;$i<@tlist;$i++){
  my $rt1 = $tlist[$i];
  for(my $j=0;$j<@tlist;$j++){
   if($nested==2){
    next if($i==$j);
   }elsif($nested==3){
    next if($j<=$i);
   }
   my $rt2 = $tlist[$j];
   my $cmd = $command;
   $cmd =~ s/\{1\}/$$rt1[0]/g;
   $cmd =~ s/\{2\}/$$rt2[0]/g;
   just_do_it($cmd);
   #print "[ $cmd ]\n";
  }
 }
}

############################################################
#	just_do_it($cmd)
############################################################
sub just_do_it
{
 my $cmd = shift;
 if($moder){ system "$cmd";}
 else{ print "$cmd\n";}
}

############################################################
#	max min
############################################################
sub max
{
 my $max = shift;
 while(@_){
  my $x = shift;
  $max = $x if($x>$max);
 }
 return $max;
}

sub min
{
 my $min = shift;
 while(@_){
  my $x = shift;
  $min = $x if($x<$min);
 }
 return $min;
}


############################################################
#	my_args
############################################################
sub my_args
{
 my $nop = scalar @_;
 for($i=0;$i<$nop;$i++){
  if($_[$i]=~m/^-[^=]+=$/){
   my $new = $_[$i].$_[$i+1];
   splice @_,$i,2,$new;
  }
 }
 foreach my $arg (@_){
  my ($opt) = ($arg =~ m/^-(\w+)/);
  my ($val) = ($arg =~ m/^-\w+=(.*)/);
  if($opt){
   $myOptList{$opt} = $val;
  }else{
   push @myGlobList,$arg;
  }
 }
}
