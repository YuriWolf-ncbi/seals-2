#!/usr/bin/perl5.16

############################################################
#	Template:	1.5, August 09, 2018
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
#use lib "/home/wolf/perl5/lib/perl5";
use lib $ENV{'PERL_LIB_PATH'};
use YIW::basic;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "0.1";
our $Pdat = "Xxx 00 2021";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $format = "%s";
my $pnum = 0;
my $nbeg = 0;
my $nend = 0;
my $nste = 1;
############################################################
#	Global variables
############################################################

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam xxx -n=... [options]

Prints sequence of numbers

Options:

	-n=n		1..n, step 1

	-n=\"n1,n2,s\"	n1..n2, step s

	-f=format	default \"$format\"

	-num		print sequential number as the first column
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option

# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$pnum = 1 if(exists $myOptList{"num"});
$format = $myOptList{"f"} if($myOptList{"f"} ne "");
my ($x,$y,$z) = split/,/,$myOptList{"n"};
if($y eq ""){							# single number, 1..x
 $nbeg = 1;
 $nend = int($x);
 $nste = 1;
}else{								# two or three numbers
 $nste = $z + 0 if($z!=0);						# nonzero step
 $nbeg = $x + 0;
 $nend = $y + 0;
}

	# printf STDERR "$Pnam:\treading \"%s\" as [%s,%s,%s]\n",$myOptList{"n"},$nbeg,$nend,$nste;
	# exit;

# my $name = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pnam,"$Pnam\t$Ppid","started") if($VERBOSE>1);

if($nend>=$nbeg and $nste>0){
 for(my $x=$nbeg,$n=1;$x<=$nend;$x+=$nste,$n++){
  printf "%d\t",$n if($pnum);
  printf $format,$x;
  print "\n";
 }
}elsif($nend<=$nbeg and $nste<0){
 for(my $x=$nbeg,$n=1;$x>=$nend;$x+=$nste,$n++){
  printf "%d\t",$n if($pnum);
  printf $format,$x;
  print "\n";
 }
}else{
 printf STDERR "$Pnam:\tfailed to interpret \"%s\" as [%s,%s,%s]\n",$myOptList{"n"},$nbeg,$nend,$nste;
 print $Instructions and exit 0;
}

#---	clean ----------------------------------------------
# unlink <$Base.*> unless($DEBUG);

############################################################
#	template_function($xxxx)
############################################################
#sub template_function
#{
# my $xxxx = shift;
#}
