#!/usr/bin/perl5.16

############################################################
#	Template:	1.5, August 09, 2018
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
#use lib "/home/wolf/perl5/lib/perl5";
use lib $ENV{'PERL_LIB_PATH'};
use YIW::basic;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "0.2";
our $Pdat = "January 17 2020";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $kk = 1;
my $rege = "";
$ldelim = "\t";
$jdelim = "\t";
$icom = 0;

############################################################
#	Global variables
############################################################

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam name -r=regexp [options]

Does search-replace limited to the specified field

Options:

	-r=regexp	search/replace pattern [MANDATORY]

	-k=n		edit n-th field (default $kk)

	-s=\"delim\"	delimiters to split line (default \"\\t\")

	-j=\"delim\"	delimiter to join line (default \"\\t\")

	-comm=n		lines starting with \"\#\" (default - pass through)
			1 - skip
			2 - treat as normal

Example:

	$Pnam tmp.txt -r=\"s/foo/bar/g\"
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option
if((lc $Base) eq "safe"){						# slow but safe
 while(1){
  my $bnum = int(rand(0x7fffffff));
  $Base = "tmp.$Pnam.$bnum";
  last if((glob "$Base.*")==0);
 }
}
# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$kk = int $myOptList{"k"} if(int $myOptList{"k"}>0);
$rege = $myOptList{"r"} if($myOptList{"r"} ne "");
$ldelim = $myOptList{"s"} if($myOptList{"s"} ne "");
$jdelim = $myOptList{"j"} if($myOptList{"j"} ne "");
$icom = int $myOptList{"comm"} if(int $myOptList{"comm"}>0);

$rege eq "" and print $Instructions and exit 0;

# my $name = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pnam,"$Pnam\t$Ppid","started") if($VERBOSE>1);

#---	work -----------------------------------------------
foreach my $xarg (@myGlobList){
 my @xglo = glob $xarg;
 foreach my $name (@xglo){
  print STDERR "$Pnam:\tReading $name\n" if($VERBOSE);
  open HAND,"<$name" or die "$Pnam:\tCan't read \"$name\"";
  while(<HAND>){
   chomp;
   if(m/^\#/){ print "$_\n" if($icom==0); next if($icom<2);}
   my @token = split/$ldelim/;
   eval("\$token[\$kk-1] =~ $rege");
   printf "%s\n",(join $jdelim,@token);
  }
  close HAND;
 }
}

#---	clean ----------------------------------------------
# unlink <$Base.*> unless($DEBUG);

############################################################
#	template_function($xxxx)
############################################################
#sub template_function
#{
# my $xxxx = shift;
#}
