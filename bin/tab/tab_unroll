#!/usr/bin/perl

############################################################
#	Template:	0.3, November 04 2004
#	Parent Path:	/net/gloin/export/home/wolf/bin/???
############################################################

############################################################
#	System etc
############################################################
$Pver = "0.4";
$Pdat = "February 27 2020";

($Pnam) = ($0 =~ m/([^\/]+)$/);
($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

$Ppid = $$;	# Process ID
############################################################
#	Definitions
############################################################
$icom = 0;
$ldelim = "\t";
$tdelim = ",";
$jdelim = "\t";
$ks = 2;
$modn = 0;
$modq = 0;

############################################################
#	Global variables
############################################################
%matr;
%lst2;

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam table -k=n [options]

Reads the table, unrolls the specified field into separate lines

Options:

	-k=n		split n-th field into tokens (default $ks)

	-s=\"delim\"	delimiters to split line (default \"\\t\")

	-x=\"delim\"	delimiters to split tokens (default \",\")

	-j=\"delim\"	delimiter to join line (default \"\\t\")
	
	-n		add the original line number as the 1st field

	-q		add number of tokens as the 1st/2nd field

	-comm=n		lines starting with \"\#\" (default - pass through)
			1 - skip
			2 - treat as normal
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
my_args(@ARGV);
-t STDIN and !@myGlobList and print $Instructions and exit 0;
push @myGlobList,"-" unless(-t STDIN);

$icom = int $myOptList{"comm"} if(int $myOptList{"comm"}>0);
$ldelim = $myOptList{"s"} if($myOptList{"s"} ne "");
$jdelim = $myOptList{"j"} if($myOptList{"j"} ne "");
$tdelim = $myOptList{"x"} if(exists $myOptList{"x"});
$ks = int $myOptList{"k"} if(int $myOptList{"k"}>0);
$modn = 1 if(exists $myOptList{"n"});
$modq = 1 if(exists $myOptList{"q"});

#---	read the source table ------------------------------
my $lcnt = 1;
foreach my $fnam (@myGlobList){
 print STDERR "$Pnam:\tReading $fnam\n";
 open HAND,"<$fnam" or die "Can't read \"$fnam\"";
 while(<HAND>){
  chomp;
  if(m/^\#/){ print "$_\n" if($icom==0); next if($icom<2);}
  my @data = split/$ldelim/;
  my @ltok = split/$tdelim/,$data[$ks-1];
  push @ltok,"" if(@ltok==0);
  my $qq = @ltok;
  foreach my $xx (@ltok){
   my @dnew = @data;
   $dnew[$ks-1] = $xx;
   printf "%d%s",$lcnt,$jdelim if($modn);
   printf "%d%s",$qq,$jdelim if($modq);
   printf "%s\n",(join $jdelim,@dnew);
  }
  $lcnt++;
 }
 close HAND;
}

############################################################
#	max min
############################################################
sub max
{
 my $max = shift;
 while(@_){
  my $x = shift;
  $max = $x if($x>$max);
 }
 return $max;
}

sub min
{
 my $min = shift;
 while(@_){
  my $x = shift;
  $min = $x if($x<$min);
 }
 return $min;
}


############################################################
#	my_args
############################################################
sub my_args
{
 my $nop = scalar @_;
 for($i=0;$i<$nop;$i++){
  if($_[$i]=~m/^-[^=]+=$/){
   my $new = $_[$i].$_[$i+1];
   splice @_,$i,2,$new;
  }
 }
 foreach my $arg (@_){
  my ($opt) = ($arg =~ m/^-(\w+)/);
  my ($val) = ($arg =~ m/^-\w+=(.*)/);
  if($opt){
   $myOptList{$opt} = $val;
  }else{
   push @myGlobList,$arg;
  }
 }
}
