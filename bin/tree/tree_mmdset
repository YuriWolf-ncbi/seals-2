#!/usr/bin/perl

############################################################
#	Template:	1.5, August 09, 2018
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
use lib $ENV{'PERL_LIB_YIW'};
use YIW::basic;
use YIW::tree;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "0.1";
our $Pdat = "2024-09-27";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $nset = 3;

############################################################
#	Global variables
############################################################

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam treefile [options]

Reads tree; selects $nset leaves by greedy Max Min Distance algorithm
(https://doi.org/10.1080/10635150802552831)
NB: N^2 distances stored!

Options:

	-n=n		reduce to n leaves (default $nset)
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option

# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$nset = int $myOptList{"n"} if(int $myOptList{"n"}>=2);

my $ftre = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pnam,"$Pnam\t$Ppid","started") if($VERBOSE>1);

#---	read tree ------------------------------------------
print STDERR "$Pnam:\tReading $ftre\n";
$root = read_newick($ftre);

#---	distances ------------------------------------------
comp_node_dist($root);
my $rlst = $$root{"dis"};
my $nlea = scalar keys %$rlst;
printf STDERR "$Pnam:\t\t%s\tleaves\n",int_commify($nlea) if($VERBOSE);

my %ldis = ();
comp_pair_dist($root,\%ldis);
printf STDERR "$Pnam:\t\t%s\tdistances\n",int_commify(scalar keys %ldis) if($VERBOSE);

#---	MMD set init ---------------------------------------
my $dmax = -1; my $pmax = "";
foreach my $pp (sort keys %ldis){
 if($ldis{$pp}>$dmax){ $dmax = $ldis{$nx}; $pmax = $pp;}
}
my ($l1,$l2) = split/\t/,$pmax;
my %lmmd = ($l1=>1,$l2=>1);

my $nmmd = 2;

#---	MMD set add ----------------------------------------
while($nmmd<$nset and $nmmd<$nlea){
 my $maxd = -1; my $lmax = "";
 foreach my $ll (keys %$rlst){
  next if($lmmd{$ll});
  my $dmin = 1e300;
  foreach my $lx (keys %lmmd){
   my $dd = $ldis{$ll."\t".$lx};
   if($dd<$dmin){ $dmin = $dd;}
  }
  if($dmin>$maxd){ $maxd = $dmin; $lmax = $ll;}
 }
 $lmmd{$lmax} = 1;
 $nmmd++;
 	#printf "%.4f\t%s\t%d\n",$maxd,$lmax,$nmmd;
}

#---	output ---------------------------------------------
foreach my $lx (sort keys %lmmd){
 print $lx."\n";
}

#---	clean ----------------------------------------------
# unlink <$Base.*> unless($DEBUG);

############################################################
#	comp_node_dist($rnod)
############################################################
sub comp_node_dist
{
 my $rnod = shift;

 my %n2d = ();
 $$rnod{"dis"} = \%n2d;				# current level storage

 my $rdes = $$rnod{"d"};

 unless(@$rdes){				# terminal node - store self
  my $name = $$rnod{"n"};
  $n2d{$name} = 0;
  return;
 }
 
 for(my $i=0;$i<@$rdes;$i++){			# scan descendants
  next if($$rdes[$i] eq "");				# no empty stuff (?)
  comp_node_dist($$rdes[$i]);				# calculate forward
  my $high = $$rdes[$i]{"l"};				# add length	
  my $rlst = $$rdes[$i]{"dis"};				# descendants of descendants
  foreach my $name (keys %$rlst){			# add to list
   $n2d{$name} = $high + $$rlst{$name};
  }
 }
}

############################################################
#	comp_pair_dist($rnod,$rdis)
############################################################
sub comp_pair_dist
{
 my $rnod = shift;
 my $rdis = shift;

 my $rdes = $$rnod{"d"};
 my $rlst = $$rnod{"dis"};

 unless(@$rdes){				# terminal node - nothing to do
  return;
 }
 
 my $ndes = @$rdes;				# no. of descendent nodes
 
 for(my $i=0;$i<$ndes;$i++){			# scan descendants
  comp_pair_dist($$rdes[$i],$rdis);
 }
 
 for(my $i=0;$i<$ndes-1;$i++){			# scan descendants
  my $rlsi = $$rdes[$i]{"dis"};				# descendants of descendants
  for(my $j=$i+1;$j<$ndes;$j++){
   my $rlsj = $$rdes[$j]{"dis"};			# descendants of descendants
   foreach my $nami (sort keys %$rlsi){
    my $leni = $$rlst{$nami};
    foreach my $namj (sort keys %$rlsj){
     my $lenj = $$rlst{$namj};
     $$rdis{$nami."\t".$namj} = $leni+$lenj;
     $$rdis{$namj."\t".$nami} = $leni+$lenj;
    }
   }
  }
 }
}
