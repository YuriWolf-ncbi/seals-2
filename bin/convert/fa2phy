#!/usr/bin/perl5.16

############################################################
#	Template:	0.2, May 02 2002
#	Parent Path:	/net/gloin/export/home/wolf/bin/???
############################################################

############################################################
#	System etc
############################################################
$Pver = "0.2";
$Pdat = "January 20 2012";

($Pnam) = ($0 =~ m/([^\/]+)$/);
($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

############################################################
#	Definitions
############################################################
$idlen = 10;
$idwrd = 2;
$delim = "[ ,;:|]";
$forms = 0;
$bllen = 10;
$blnum = 5;
$sloppy = 0;

############################################################
#	Global variables
############################################################

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam name [options]

FASTA to Phylip.

Options:

	-i=n		truncate/pad IDs to length n (default $idlen, 0 - no)

	-w=n		use n-th word of ID (default $idwrd; 0 - all)

	-s		sequential format (default - interleaved)

	-sloppy		skip test for sequence length and ID uniqueness
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
my_args(@ARGV);
-t STDIN and !@myGlobList and print $Instructions and exit 0;
push @myGlobList,"-" unless(-t STDIN);

$idlen = int $myOptList{"i"} if(exists $myOptList{"i"});
$idwrd = int $myOptList{"w"} if(exists $myOptList{"w"});
$forms = 1 if(exists $myOptList{"s"});
$sloppy = 1 if(exists $myOptList{"sloppy"});

foreach my $name (@myGlobList){
 my $savedel = $/;
 $/="\n>";
 open HAND,"<$name" or die "Can't read \"$name\"";
 while(<HAND>){
  chomp;
  my ($def,@rest)=split /\n+/;
  $def =~ s/^>*//;
  my $seq = join "",@rest;
  $seq =~ tr/ \t//d;
  my ($id) = split/ +/,$def;
  $id = (split/$delim/,$id)[$idwrd-1] if($idwrd>0);
  if($idlen>0){
   $id = substr $id,0,$idlen;
   while((length $id)<$idlen){ $id .= " ";}
  }
  push @lids,$id;
  push @lseq,$seq;
 }
 close HAND;
 $/=$savedel;
}

my $nseq = @lseq;
my $lali = length $lseq[0];

unless($sloppy){
 my %names = ();
 for(my $i=0;$i<$nseq;$i++){
  die "sequence ID \"$lids[$i]\" is not unique" if($names{$lids[$i]});
  $names{$lids[$i]} = 1;
 }
 for(my $i=1;$i<$nseq;$i++){
  die "length of sequence #$i is not $lali" if((length $lseq[$i])!=$lali);
 }
}

print "$nseq $lali\n";

if($forms==0){
 my $pl=0;
 while($pl<$lali){
  for(my $i=0;$i<$nseq;$i++){
   if($pl==0){ printf "%s",$lids[$i];}
   else{ for(my $j=0;$j<$idlen;$j++){ print " ";}}
   my $pb = $pl;
   while($pb<min($pl+$bllen*$blnum,$lali)){
    printf " %s",substr $lseq[$i],$pb,$bllen;
    $pb += $bllen;
   }
   print "\n";
  }
  print "\n";
  $pl += $bllen*$blnum;
 }
}else{
 for(my $i=0;$i<$nseq;$i++){
  my $pl=0;
  while($pl<$lali){
   if($pl==0){ printf "%s",$lids[$i];}
   else{ for(my $j=0;$j<$idlen;$j++){ print " ";}}
   my $pb = $pl;
   while($pb<min($pl+$bllen*$blnum,$lali)){
    printf " %s",substr $lseq[$i],$pb,$bllen;
    $pb += $bllen;
   }
   print "\n";
   $pl += $bllen*$blnum;
  }
 }
}

############################################################
#	max min
############################################################
sub max
{
 my $max = shift;
 while(@_){
  my $x = shift;
  $max = $x if($x>$max);
 }
 return $max;
}

sub min
{
 my $min = shift;
 while(@_){
  my $x = shift;
  $min = $x if($x<$min);
 }
 return $min;
}


############################################################
#	my_args
############################################################
sub my_args
{
 my $nop = scalar @_;
 for($i=0;$i<$nop;$i++){
  if($_[$i]=~m/^-[^=]+=$/){
   my $new = $_[$i].$_[$i+1];
   splice @_,$i,2,$new;
  }
 }
 foreach my $arg (@_){
  my ($opt) = ($arg =~ m/^-(\w+)/);
  my ($val) = ($arg =~ m/^-\w+=(.*)/);
  if($opt){
   $myOptList{$opt} = $val;
  }else{
   push @myGlobList,$arg;
  }
 }
}
