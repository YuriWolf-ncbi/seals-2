#!/usr/bin/perl

############################################################
#	Template:	0.3, November 04 2004
#	Parent Path:	/net/gloin/export/home/wolf/bin/???
############################################################

############################################################
#	System etc
############################################################
$Pver = "0.2";
$Pdat = "March 17 2015";

($Pnam) = ($0 =~ m/([^\/]+)$/);
($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

$PID = $$;	# Process ID
############################################################
#	Definitions
############################################################
$fdat = 1;
$icom = 1;
$ldelim = "\\s+";
$dnam = "";
$Epsilon = 1e-6;
$qdat = "0.25,0.75";

############################################################
#	Global variables
############################################################
@arra;
@qlst;

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam name [options]

Returns statistics on array of data:

ndat median average stdev sum quantiles...

Options:

	-d=n		use n-th field as the data (default $fdat)

	-q=\"q1,q2,...\"	quantiles (default \"$qdat\")

	-nocomm		do NOT ignore lines starting with "#"

	-s="delim"	delimiters to split line (default "$ldelim")

	-n=name		print dataset name (default none)
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
my_args(@ARGV);
-t STDIN and !@myGlobList and print $Instructions and exit 0;
push @myGlobList,"-" unless(-t STDIN);

$fdat = $myOptList{"d"} if($myOptList{"d"}>0);
$icom = 0 if(exists $myOptList{"nocomm"});
$dnam = $myOptList{"n"} if($myOptList{"n"} ne "");
$ldelim = $myOptList{"s"} if($myOptList{"s"} ne "");
$qdat = $myOptList{"q"} if($myOptList{"q"} ne "");

@qlst = split/,/,$qdat;

my $nn = 0;
my $sx = 0;

foreach my $name (@myGlobList){
 open HAND,"<$name" or die "Can't read \"$name\"";
 while(<HAND>){
  chomp;
  next if(m/^\#/ and $icom);
  my @token = split/$ldelim/;
  my $xx = $token[$fdat-1];
  $sx += $xx;
  $nn++;
  push @arra,$xx;
 }
 close HAND;
}


my ($av,$sd) = array2var(\@arra,$nn);

@arra = sort {$a<=>$b} @arra;
my $amed = array2quant(\@arra,$nn,0.5);
print "$dnam\t" if($dnam ne "");
print "$nn\t$amed\t$av\t$sd\t$sx";
foreach my $qq (@qlst){
 my $qval = array2quant(\@arra,$nn,$qq);
 print "\t$qval";
}
print "\n";

############################################################
#	array2var($rarr,$ndat)
############################################################
# numerically stable online algorithm
# Donald E. Knuth (1998).
# The Art of Computer Programming, volume 2: Seminumerical Algorithms
# 3rd edn., p. 232. Boston: Addison-Wesley.
sub array2var
{
 my $rarr = shift;
 my $ndat = shift;

 my $av = 0; my $sd = 0;
 
 for(my $i=0;$i<$ndat;$i++){
  my $dd = $$rarr[$i] - $av;
  $av += $dd/($i+1);
  $sd += $dd*($$rarr[$i] - $av);
 }
 $sd /= $ndat - 1 if($ndat>1);
 $sd = 0 if($sd<0);
 return ($av,sqrt($sd));
}

############################################################
#	array2quant($rarr,$ndat,$quan)
############################################################
# quantile in a sorted array
# intelligent re integer boundaries
sub array2quant
{
 my $rarr = shift;
 my $ndat = shift;
 my $quan = shift;

 my $indr = $ndat*$quan;
 $indr = 0.5 if($indr<=0);
 $indr = $ndat - 0.5 if($indr>=$ndat);
 my $indi = int($indr);
 return $$rarr[$indi] if($indi<$indr);
 return ($$rarr[$indi-1]+$$rarr[$indi])/2;
}

############################################################
#	max min
############################################################
sub max
{
 my $max = shift;
 while(@_){
  my $x = shift;
  $max = $x if($x>$max);
 }
 return $max;
}

sub min
{
 my $min = shift;
 while(@_){
  my $x = shift;
  $min = $x if($x<$min);
 }
 return $min;
}


############################################################
#	my_args
############################################################
sub my_args
{
 my $nop = scalar @_;
 for($i=0;$i<$nop;$i++){
  if($_[$i]=~m/^-[^=]+=$/){
   my $new = $_[$i].$_[$i+1];
   splice @_,$i,2,$new;
  }
 }
 foreach my $arg (@_){
  my ($opt) = ($arg =~ m/^-(\w+)/);
  my ($val) = ($arg =~ m/^-\w+=(.*)/);
  if($opt){
   $myOptList{$opt} = $val;
  }else{
   push @myGlobList,$arg;
  }
 }
}
