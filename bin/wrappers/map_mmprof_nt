#!/usr/bin/perl

############################################################
#	Template:	1.5, August 09, 2018
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
use lib "/home/wolf/perl5/lib/perl5";
use YIW::basic;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "0.1";
our $Pdat = "August 18 2024";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
$dpro = "";
$dpmm = "";
$eval = 100;

############################################################
#	Global variables
############################################################

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam query.fna -d=profiledir -m=profiledb [options]

Options:

Finds footprints of the best profile in the DB on nucleotide sequences.

Profile directory contains aligned <name>.FASTA files with consensus sequences on top.

Profile DB is made from the same alignments.

Options:

	-d=profiledir	profile directory (MANDATORY!)

	-m=profiledb	mmseqs profile DB (MANDATORY!)

	-e=evalue	mmseqs search evalue limit (default $eval)
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,0);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option

# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$dpro = $myOptList{"dir"} if($myOptList{"dir"} ne "");			# hidden alternative
$dpro = $myOptList{"d"} if($myOptList{"d"} ne "");
$dpmm = $myOptList{"db"} if($myOptList{"db"} ne "");			# hidden alternative
$dpmm = $myOptList{"m"} if($myOptList{"m"} ne "");
$eval = $myOptList{"e"} + 0 if($myOptList{"e"}>0);
$VERBOSE = "0" if($VERBOSE==0);

my $ffna = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pnam,"$Pnam\t$Ppid","started") if($VERBOSE>1);

#---	translate and run ----------------------------------
$CMD = "orf $ffna -c=6000 -f=0 -m=0 -n=3 -w=0 | fa_strict -u -l=0 -r=X > $Base.faa ; map_mmprof_aa $Base.faa -d= $dpro -m= $dpmm -VERB= $VERBOSE > $Base.tab"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);

#---	read sequence lengths ------------------------------
my %nt2l = ();
my $def = ""; my $seq = "";
print STDERR "$Pnam:\tReading $ffna\n" if($VERBOSE);
open HAND,"<$ffna" or die "$Pnam:\tCan't read \"$ffna\"";
while(<HAND>){
 chomp;
 if(m/^>/){
  my $ddd = substr $_,1;
  process_sequence(\$seq,\$def) if($seq ne "" and $def ne "");
  $def = $ddd; $seq = "";
  next;
 }
 $seq .= $_;
}
close HAND;
process_sequence(\$seq,\$def) if($seq ne "" and $def ne "");
printf STDERR "$Pnam:\t\t%s\tsequences\n",int_commify(scalar keys %nt2l) if($VERBOSE);

#---	read hits ------------------------------------------
print STDERR "$Pnam:\tReading $Base.tab\n" if($VERBOSE);
open HAND,"<$Base.tab" or die "$Pnam:\tCan't read \"$Base.tab\"";
while(<HAND>){
 chomp;
 my ($idaa,$frag,$prof,$sq) = split/\t/;
 my ($p1,$p2) = ($frag =~ m/^(\d+).+\b(\d+)$/);
 my ($idnt,$fram) = ($idaa =~ m/^(.+)_fr(\d+)$/);
 my $x1 = coord_map($p1,0,$fram,$nt2l{$idnt});
 my $x2 = coord_map($p2,1,$fram,$nt2l{$idnt});
 printf "%s\t%d-%d\t%s\t%s\n",$idnt,$x1,$x2,$prof,$sq;
}
close HAND;

#---	clean ----------------------------------------------
unlink <$Base.*> unless($DEBUG);

############################################################
#	process_sequence($rseq,$rdef)
############################################################
sub process_sequence
{
 my $rseq = shift;
 my $rdef = shift;

 $$rseq =~ tr/ \t//d;

 my ($id) = split/\s+/,$$rdef;
 $id = (split/$delim/,$id)[$idwrd-1] if($idwrd>0);
 
 $nt2l{$id} = length($$rseq);
}

############################################################
#	coord_map($apos,$iend,$afra,$nlen)
############################################################
sub coord_map
{
 my $apos = shift;
 my $iend = shift;
 my $afra = shift;
 my $nlen = shift;

 $afra = 3 - $afra if($afra>3);
 
 my $eoff = 2 if($iend>0);
 
 return $nlen - ($apos-1)*3 + $afra + 1 - $eoff if($afra<0);
 return ($apos-1)*3 + $afra + $eoff;
}
