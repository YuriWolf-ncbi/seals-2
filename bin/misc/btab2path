#!/usr/bin/perl5.16

############################################################
#	Template:	1.5, August 09, 2018
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
use lib "/home/wolf/perl5/lib/perl5";
use YIW::basic;
use YIW::blast;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "0.3";
our $Pdat = "March 24 2020";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $idwrd = 0;

my $ethr = 0.01;
my $q300 = 0;

my $othr = 0.25;
my $cthr = 0.75;
my $gmax = 1500;
my $wbas = 60;
my $dquo = 0.5;

my $fraw = 0;

############################################################
#	Global variables
############################################################

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam psiblasttab [options]

Reads PSI-BLAST output as done by run_psiprofile

Output (tab-delimited, raw coordinates):

	score, code, path-s, path-q, l-path-s, l-path-q, l-s, l-q, sid, qid

Options:

	-w=n		use n-th word of ID in BLAST (default all)

	-e=x		target e-value (default $ethr)

	-q300=x		e-value threshold dependent on length (2 recommended)

	-othr=x		max overlap between HSPs (default $othr)

	-cthr=x		min coverage for full-length hit (default $cthr)

	-lgap=n		maximum gap to span between segments (default $gmax)

	-mind=n		min domain length (default $wbas)

	-raw		no overlap correction (default resolve)
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option
if((lc $Base) eq "safe"){						# slow but safe
 while(1){
  my $bnum = int(rand(0x7fffffff));
  $Base = "tmp.$Pnam.$bnum";
  last if((glob "$Base.*")==0);
 }
}
# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$idwrd = int $myOptList{"w"} if(exists $myOptList{"w"});
$ethr = $myOptList{"e"} + 0 if($myOptList{"e"}>0);
$q300 = $myOptList{"q300"} + 0 if($myOptList{"q300"}>0);
$othr = $myOptList{"othr"} + 0 if(exists $myOptList{"othr"});
$cthr = $myOptList{"cthr"} + 0 if(exists $myOptList{"cthr"});
$gmax = int $myOptList{"lgap"} if(int $myOptList{"lgap"}>0);
$wbas = int $myOptList{"mind"} if(int $myOptList{"mind"}>0);
$fraw = 1 if(exists $myOptList{"raw"});

my $fbla = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pnam,"$Pnam\t$Ppid","started") if($VERBOSE>1);

#---	read psiblast --------------------------------------
my %hits = ();
my %xlen = ();

blast_read_btab($fbla,$ethr,0,$idwrd+0,\%hits,\%xlen,$q300);

	#foreach my $qqhh (sort keys %hits){
	# my $rhit = $hits{$qqhh};
	# foreach my $xx (sort {$b<=>$a} @$rhit){
	#  printf "[%s]\t%s\n",$qqhh,$xx;
	# }
	#}

#---	process hits ---------------------------------------
foreach my $qqhh (sort keys %hits){
 my ($qq,$hh) = split/\t/,$qqhh;
 my $rhit = $hits{$qqhh};
 while(1){
  	#printf "HITS:\t%d\n",(scalar @$rhit);
  my ($scor,$code,$patq,$path,$qple,$hple,$eval) = blast_process_hits($qq,$hh,$xlen{$qq},$xlen{$hh},$rhit,$othr,$wbas,$dquo,$cthr,$gmax,$fraw);
 	# printf "#%s\t%.1f\t%d\t%s\t%s\t[%d]\t[%d]\n",$hh,$scor,$code,$patq,$path,$xlen{$hh},$xlen{$qq} if($DEBUG);
  last if($scor<=0);
  printf "%.1f\t%d\t%s\t%s\t%d\t%d\t%d\t%d\t%s\t%s\t%.2e\n",$scor,$code,$path,$patq,$hple,$qple,$xlen{$hh},$xlen{$qq},$hh,$qq,$eval;
  YIW::blast::clear_subject_hits($rhit,$path,$othr);
 }
}

#---	clean ----------------------------------------------
# unlink <$Base.*> unless($DEBUG);

############################################################
#	template_function($xxxx)
############################################################
#sub template_function
#{
# my $xxxx = shift;
#}
