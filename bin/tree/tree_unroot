#!/usr/bin/perl

############################################################
#	Template:	0.3, November 04 2004
#	Parent Path:	/net/gloin/export/home/wolf/bin/???
############################################################

############################################################
#	System etc
############################################################
use lib $ENV{'PERL_LIB_YIW'};
use YIW::basic;
use YIW::tree;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

$Pver = "0.3";
our $Pdat = "2025-04-11";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################

############################################################
#	Global variables
############################################################

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Pnam $Pver, $Pdat

$Pnam trefile [options]

Reads a tree in Newick format;
removes bifurcation at the root

Options:
	none
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option
if((lc $Base) eq "safe"){						# slow but safe
 while(1){
  my $bnum = int(rand(0x7fffffff));
  $Base = "tmp.$Pnam.$bnum";
  last if((glob "$Base.*")==0);
 }
}
# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line

$ftre = shift @myGlobList;

print STDERR "$Pnam:\tReading $ftre\n" if($VERBOSE);
my $root = read_newick($ftre);

my $rdes = $$root{"d"};

if(@$rdes<2){
 die "Bad tree in \"$ftre\" - single descendant at root";
}elsif(@$rdes==2){
 my $rson; my $rdss;
 $rson = $$rdes[0];
 $rdot = $$rdes[1];
 $rdss = $$rson{"d"};
 if(@$rdss<2){
  $rson = $$rdes[1];
  $rdot = $$rdes[0];
  $rdss = $$rson{"d"};
  if(@$rdss<2){
   die "Bad tree in \"$ftre\" - single descendants of root bifurcation";
  }
 }
 $$rdot{"l"} += $$rson{"l"};
 $$rdot{"p"} = $rson;
 push @$rdss,$rdot;
 $root = $rson;
 delete $$root{"l"};
 delete $$root{"p"};
 delete $$root{"b"};
}

write_newick($root,"-",0x06);
