#!/usr/bin/perl

############################################################
#	Template:	1.5, July 16, 2017
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
use lib $ENV{'PERL_LIB_YIW'};
use YIW::basic;
use YIW::tree;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "0.1";
our $Pdat = "June 27 2018";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $lflag=0;
my $lleaf=0;

############################################################
#	Global variables
############################################################
my $root;

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam treefile [options]

Replace support values with labels

Options:

	-l=m		label mode m
			0 - root->leaves, internal 1st (PHYLIP style)
			1 - root->leaves, leaves 1st (PAML style)
			2 - leaves->root, internal 1st (COUNT style)
			3 - leaves->root, leaves 1st (Paul HIGGS style)

	-ll		prepend labels to leaves
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option
if((lc $Base) eq "safe"){						# slow but safe
 while(1){
  my $bnum = int(rand(0x7fffffff));
  $Base = "tmp.$Pnam.$bnum";
  last if((glob "$Base.*")==0);
 }
}
# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$flagl = int $myOptList{"l"} if(int $myOptList{"l"}>0);
$lleaf = 1 if(exists $myOptList{"ll"});

my $ftre = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pname,$Ppid,"started") if($VERBOSE>1);

#---	read, label, write ---------------------------------
print STDERR "$Pnam:\tReading $ftre\n";
$root = read_newick($ftre);

label_tree($root,$flagl);

prepend_labels_leaves($root) if($lleaf>0);

write_newick($root,"-",10);

#---	clean ----------------------------------------------
# unlink <$Base.*> unless($DEBUG);

############################################################
#	prepend_labels_leaves($rnod)
############################################################
sub prepend_labels_leaves
{
 my $rnod = shift;

 my $rdes = $$rnod{"d"};			# descendants

 unless(@$rdes){				# terminal node - prepend label
  $$rnod{"n"} = $$rnod{"lab"}."/".$$rnod{"n"};
  return;
 }

 for(my $i=0;$i<@$rdes;$i++){			# scan descendants
  prepend_labels_leaves($$rdes[$i]);			# continue
 }
}
