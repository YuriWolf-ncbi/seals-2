#!/usr/bin/perl

############################################################
#	Template:	1.5, August 09, 2018
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
use lib "/home/wolf/perl5/lib/perl5";
use YIW::basic;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;
# use Digest::MD5 qw/md5_hex/;

our $Pver = "0.3";
our $Pdat = "August 21 2024";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $dpro = "";
my $dpmm = "";
my $eval = 100;
my $idwrd = 0;
my $delim = "[ ,;:|]";
my $sgemin = 0x7fffffff;
my $lazy = 0;

############################################################
#	Global variables
############################################################

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam query.faa -d=profiledir -m=profiledb [options]

Finds footprints of the best profile in the DB on amino acid sequences.

Profile directory contains aligned <name>.FASTA files with consensus sequences on top.

Profile DB is made from the same alignments.

Options:

	-d=profiledir	profile directory (MANDATORY!)

	-m=profiledb	mmseqs profile DB (MANDATORY!)

	-e=evalue	mmseqs search evalue limit (default $eval)

	-lazy		use mmseqs result (default run hhalign)

	-sge=n		run on SGE if the number of jobs>=n (default $sgemin)
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option

# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$dpro = $myOptList{"dir"} if($myOptList{"dir"} ne "");			# hidden alternative
$dpro = $myOptList{"d"} if($myOptList{"d"} ne "");
$dpmm = $myOptList{"db"} if($myOptList{"db"} ne "");			# hidden alternative
$dpmm = $myOptList{"m"} if($myOptList{"m"} ne "");
$eval = $myOptList{"e"} + 0 if($myOptList{"e"}>0);
$lazy = 1 if(exists $myOptList{"lazy"});
$sgemin = int $myOptList{"sge"} if(int $myOptList{"sge"}>0);

my $ffaa = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pnam,"$Pnam\t$Ppid","started") if($VERBOSE>1);

#---	prep -----------------------------------------------
my $Bdir = YIW::basic::tempdir_make_safe("mmap");

#---	search ---------------------------------------------
$CMD = "run_mmsearch $ffaa -fasta -d= $dpmm -s=7.5 > $Bdir/tmp.tab"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);

#---	process table --------------------------------------
$CMD = "tab_shuffle $Bdir/tmp.tab -l='2,1,4,3,7,8,5,6,9,10,11' | btab2path -p1 -e=100 | path_read_combine -e=$eval -q300=2 -o=0 | tab_best -k1=9 -k2=1 -m=2 > $Bdir/tmp.p.tab"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);

#---	read table -----------------------------------------
my %q2sc = (); my %q2pr = (); my %q2fr = ();

print STDERR "$Pnam:\tReading $Bdir/tmp.p.tab\n" if($VERBOSE);
open HAND,"<$Bdir/tmp.p.tab" or die "$Pnam:\tCan't read \"$Bdir/tmp.p.tab\"";
while(<HAND>){
 chomp;
 next if(m/^\#/);
 #my ($qq,$hh,$ql,$hl,$qb,$qe,$hb,$he,$ev,$ss) = split/\t/;
 my ($ss,$cc,$patq,$patp,$lpaq,$lpap,$lq,$lp,$qq,$pp,$ev) = split/\t/;
 if($ss>$q2sc{$qq}){ $q2sc{$qq} = $ss; $q2pr{$qq} = $pp; $q2fr{$qq} = $patq;}
}
close HAND;
printf STDERR "$Pnam:\t\t%s\tqueries have hits\n",int_commify(scalar keys %q2pr) if($VERBOSE);

#---	prep aa db -----------------------------------------
$CMD = "fake_gi $ffaa -b=1 -p='yiw_id_' | makeblastdb -in - -title $ffaa -dbtype prot -parse_seqids -out $Bdir/tmp.db > /dev/null"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
$CMD = "blastdbcmd -db $Bdir/tmp.db -entry all -outfmt '%a %t' | nemp -r='^(\\S+)\\s+(\\S+)' > $Bdir/tmp.id.tab"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);

#---	read ID table---------------------------------------
my %if2o = ();
print STDERR "$Pnam:\tReading $Bdir/tmp.id.tab\n" if($VERBOSE);
open HAND,"<$Bdir/tmp.id.tab" or die "$Pnam:\tCan't read \"$Bdir/tmp.id.tab\"";
while(<HAND>){
 chomp;
 my ($ff,$id) = split/\t/;
 my $prof = $q2pr{$id};
 next if($prof eq "");
 $if2o{$ff} = $id;
}
close HAND;
printf STDERR "$Pnam:\t\t%s\tqueries to process\n",int_commify(scalar keys %if2o) if($VERBOSE);

#---	prepare fragments storage --------------------------
my %f2fr = ();

if($lazy){		# lazy; use mmseqs path 

open HANX,">$Bdir/tmp.ffr" or die "$Pnam:\tCan't write \"$Bdir/tmp.ffr\"";
foreach my $ff (keys %if2o){
 my $id = $if2o{$ff};
 my $fr = $q2fr{$id};
 $f2fr{$ff} = $fr;
 print HANX "$ff:$fr\n";
}
close HANX;

}else{			# diligent; run hhalign

#---	prep output dir ------------------------------------
mkdir "$Bdir/out";

#---	prepare commands -----------------------------------
open HANX,">$Bdir/tmp.cmd.lst" or die "$Pnam:\tCan't write \"$Bdir/tmp.cmd.lst\"";
foreach my $ff(keys %if2o){
 my $id = $if2o{$ff};
 my $prof = $q2pr{$id};
 print HANX "blastdbcmd -db $Bdir/tmp.db -entry $ff > $Bdir/tmp.$ff.faa ; hhalign -i $Bdir/tmp.$ff.faa -t $dpro/$prof.FASTA -glob -id 100 -diff inf -M first -v 0 -o $Bdir/tmp.$ff.txt > /dev/null ; hhres2btab $Bdir/tmp.$ff.txt -VERB=0 > $Bdir/out/tmp.$ff.tab ; rm $Bdir/tmp.$ff.*\n";
}
close HANX;

#---	run commands ---------------------------------------
my $njob = scalar keys %if2o;
if($njob<$sgemin){
 $CMD = "chmod a+x $Bdir/tmp.cmd.lst ; $Bdir/tmp.cmd.lst"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
}else{
 $CMD = "submitSGEfarm $Bdir/tmp.cmd.lst -bt=-4 -rand -work=2"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
}

#---	read output, prepare ffr ---------------------------
open HANX,">$Bdir/tmp.ffr" or die "$Pnam:\tCan't write \"$Bdir/tmp.ffr\"";
print STDERR "$Pnam:\tReading $Bdir/out/*\n" if($VERBOSE);
foreach my $ff (keys %if2o){
 open HAND,"<$Bdir/out/tmp.$ff.tab" or die "$Pnam:\tCan't read \"$Bdir/out/tmp.$ff.tab\"";
 while(<HAND>){
  chomp;
  next if(m/^\#/);
  my ($qq,$hh,$ql,$hl,$qb,$qe,$hb,$he,$ev,$ss) = split/\t/;
  next if($qq ne $ff);
  $fr = $qb."-".$qe;
  $f2fr{$ff} = $fr;
  print HANX "$ff:$fr\n";
 }
 close HAND;
}
printf STDERR "$Pnam:\t\t%s\tqueries aligned\n",int_commify(scalar keys %f2fr) if($VERBOSE);
close HANX;

}			# ENDIF lazy

#---	fragments ------------------------------------------
$CMD = "nemp $Bdir/tmp.ffr -r='^(\\S+):' | blastdbcmd -db  $Bdir/tmp.db -entry_batch - | fa2frag -f= $Bdir/tmp.ffr -w=0 | fa2sr -w=0 > $Bdir/tmp.sr"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);

#---	output ---------------------------------------------
print STDERR "$Pnam:\tReading $Bdir/tmp.sr\n" if($VERBOSE);
open HAND,"<$Bdir/tmp.sr" or die "$Pnam:\tCan't read \"$Bdir/tmp.sr\"";
while(<HAND>){
 chomp;
 my ($ff,$sq) = split/\t/;
 my $fr = $f2fr{$ff};
 my $id = $if2o{$ff};
 my $prof = $q2pr{$id};
 print "$id\t$fr\t$prof\t$sq\n";
}
close HAND;

#---	clean ----------------------------------------------
# unlink <$Base.*> unless($DEBUG);
unless($DEBUG){
 $CMD = "rm -r $Bdir"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
}
