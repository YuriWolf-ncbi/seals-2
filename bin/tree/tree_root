#!/usr/bin/perl

############################################################
#	Template:	1.5, August 09, 2018
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
use lib $ENV{'PERL_LIB_YIW'};
use YIW::basic;
use YIW::tree;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "0.6";
our $Pdat = "2025-04-11";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $EPSILON = 1e-9;
my $rmod = 0;
my $wmod = 2+4;
my $rlab = "";
my $mreg = 0;

############################################################
#	Global variables
############################################################

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam treefile [options]

Options:

	-m=n		0 - best root
			1 - all good roots
			2 - all roots
			3 - root at specified node

	-lab=xxx	root at this node (Phylip style) or leaf

	-reg		label is a regexp

	-noboot		no bootstraps in output
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option
if((lc $Base) eq "safe"){						# slow but safe
 while(1){
  my $bnum = int(rand(0x7fffffff));
  $Base = "tmp.$Pnam.$bnum";
  last if((glob "$Base.*")==0);
 }
}
# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$rmod = int $myOptList{"m"} if(exists $myOptList{"m"});
$wmod = 2 if(exists $myOptList{"noboot"});
$rlab = $myOptList{"lab"} if($myOptList{"lab"} ne "");
$mreg = 1 if(exists $myOptList{"1"});

my $ftre = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pname,$Ppid,"started") if($VERBOSE>1);

#---	read tree ------------------------------------------
print STDERR "$Pnam:\tReading $ftre\n" if($VERBOSE);
my $root = read_newick($ftre,0);
label_tree($root,0);		# Phylip-style labels

#---	list nodes -----------------------------------------
my @lnod = ();
my @llea = ();
list_tree_nodes($root,\@lnod,\@llea);
printf STDERR "$Pnam:\t\t%s\tleaves\n",int_commify(scalar @llea) if($VERBOSE);

#---	check if too small ---------------------------------
if(@llea<3){
 write_newick($root,"-",$wmod,"");
 exit;
}

#---	inflate edges --------------------------------------
foreach my $rnod (@lnod,@llea){
 next if($$rnod{"p"} eq "");			# do not touch the root
 next if($$rnod{"l"}>=$EPSILON);		# long enough
 $$rnod{"l"} = $EPSILON*(0.5+rand()/2);		# inflate
 $$rnod{"inflated"} = 1;			# mark
}

#---	check if rooted ------------------------------------
{
 my $rdes = $$root{"d"};
 if(@$rdes==2){			# rooted - unroot
  my $rdex = $$rdes[0];
  my $rdey = $$rdes[1];
  my $rded = $$rdex{"d"};
  if(@$rded<2){ $rdex = $$rdes[1]; $rdey = $$rdes[0]; $rded = $$rdex{"d"};}
  my $ll = $$rdex{"l"} + $$rdey{"l"};
  my $bo = max($$rdex{"b"},$$rdey{"b"});
  $$rdey{"p"} = $rdex;
  push @$rded,$rdey;
  $$rdey{"l"} = $ll;
  $$rdey{"b"} = $bo;
  $root = $rdex;
  $$root{"p"} = "";
  @lnod = ();
  @llea = ();
  list_tree_nodes($root,\@lnod,\@llea);
 }
}

#---	list branches --------------------------------------
# @lbra
# x - ref to one node
# y - ref to another node
# l - branch length
# b - branch bootstrap
# $rnod
# br - ref to array of branches  
my @lbra = ();
foreach my $rnod (@lnod,@llea){
 next if($$rnod{"p"} eq "");
 my $rpar = $$rnod{"p"};
 my %xbra = ();
 $xbra{"x"} = $rnod;
 $xbra{"y"} = $rpar;
 $xbra{"l"} = $$rnod{"l"} + 0;
 $xbra{"b"} = $$rnod{"b"} + 0; $xbra{"b"} = 1 if($$rnod{"d"} eq "");
 push @lbra,\%xbra;
 if($$rnod{"br"} eq ""){ my @tmp = (); $$rnod{"br"} = \@tmp;}
 my $rlbn = $$rnod{"br"};
 if($$rpar{"br"} eq ""){ my @tmp = (); $$rpar{"br"} = \@tmp;}
 my $rlbp = $$rpar{"br"};
 push @$rlbn,\%xbra;
 push @$rlbp,\%xbra;
}

#---	print stuff ----------------------------------------
	#foreach my $rnod (@lnod,@llea){
	# printf "%x\t%s\n",$rnod,(($$rnod{"n"} ne "")?$$rnod{"n"}:"INT");
	# my $rdes = $$rnod{"d"};
	# printf "%x\tD\t%d\n",$rnod,(scalar @$rdes);
	# my $rpar = $$rnod{"p"};
	# printf "%x\tP\t%d\n",$rnod,(($rpar eq "")?0:1);
	# my $rbra = $$rnod{"br"};
	# printf "%x\tB\t%d\n",$rnod,(scalar @$rbra);
	#}
	#print "//\n";
	#foreach my $rbra (@lbra){
	# printf "%x\t%x\n",$rbra,$$rbra{"x"};
	# printf "%x\t%x\n",$rbra,$$rbra{"y"};
	# printf "%x\t%.3f\n",$rbra,$$rbra{"l"};
	# printf "%x\t%.2f\n",$rbra,$$rbra{"b"};
	#}

#---	print trees ----------------------------------------
	#foreach my $rbra (@lbra){
	# my $lx = write_tree_bb_rec($$rbra{"x"},$$rbra{"y"},2+4);
	# $lx .= $$rbra{"b"} if($lx=~m/\)$/);
	# my $ly = write_tree_bb_rec($$rbra{"y"},$$rbra{"x"},2+4);
	# $ly .= $$rbra{"b"} if($ly=~m/\)$/);
	# printf "(%s:%.5f,%s:%.5f);\n",$lx,$$rbra{"l"}/2,$ly,$$rbra{"l"}/2;
	#}

#---	collect TBL ----------------------------------------
	#my $ttbl = tree_collect_tbl($root,0);
	#calc_tbl_branch($root,$ttbl);

	#printf "TBL\t%.3f\n",$ttbl;
	#foreach my $rbra (@lbra){
	# printf "%x\t\t%.3f\n",$rbra,$$rbra{"l"};
	# printf "\t%x\t%.3f\n",$$rbra{"x"},$$rbra{"xtbl"};
	# printf "\t%x\t%.3f\n",$$rbra{"y"},$$rbra{"ytbl"};
	#}

#---	walk all directions --------------------------------
foreach my $rnod (@llea){		# start at each leaf
 my $rbls = $$rnod{"br"};
 my $rbra = $$rbls[0];
 my $rdes = $$rbra{"x"}; $rdes = $$rbra{"y"} if($$rbra{"x"} eq $rnod);
 	#printf "%x\t%x\n",$rnod,$rdes;
 	#printf "%x\t%x\t%x\n",$rbra,$$rbra{"x"},$$rbra{"y"};
 walk_tree_bb_dist($rbra,$rdes);
}

#---	assess suitability for the root --------------------
foreach my $rbra (@lbra){
 my $blen = $$rbra{"l"};
 my $hdif = abs($$rbra{"xh"}-$$rbra{"yh"});
 $$rbra{"root"} = ($hdif>$blen)?0:1;
 $$rbra{"diff"} = $hdif/$blen;
 $$rbra{"difn"} = (abs($$rbra{"xn"}-$$rbra{"yn"}))/($$rbra{"xn"}+$$rbra{"yn"});
}

#---	deflate branches -----------------------------------
foreach my $rbra (@lbra){
 $$rbra{"l"} = 0 if($$rbra{"l"}<$EPSILON);				# deflate
}

@lbra = sort { sort_branch($a,$b)} @lbra;

	#foreach my $rbra (@lbra){
	# printf "%x\t\t%.3f\n",$rbra,$$rbra{"l"};
	# printf "\t%x\t%d\t%.3f\n",$$rbra{"x"},$$rbra{"xn"},$$rbra{"xh"};
	# printf "\t%x\t%d\t%.3f\n",$$rbra{"y"},$$rbra{"yn"},$$rbra{"yh"};
	# printf "\t%d\t%.3f\t%.3f\n",$$rbra{"root"},$$rbra{"diff"},$$rbra{"difn"};
	#}

#---	print trees ----------------------------------------
my $done = 0;
foreach my $rbra (@lbra){
 last if($rmod==1 and $$rbra{"root"}==0 and $done>0);
 if($rmod==3){								# root as specified
  my $rnox = $$rbra{"x"};
  my $labx = $$rnox{"n"};
  $labx = $$rnox{"lab"} if($labx eq "");
  my $hitx = $labx eq $rlab;
  $hitx = ($labx =~ m/$rlab/);
  my $rnoy = $$rbra{"y"};
  my $laby = $$rnoy{"n"};
  $laby = $$rnoy{"lab"} if($laby eq "");
  my $hity = $laby eq $rlab;
  $hity = ($laby =~ m/$rlab/);
  next unless($hitx or $hity);
 }
 my $linx = write_tree_bb_rec($$rbra{"x"},$$rbra{"y"},$wmod);
 $linx .= $$rbra{"b"} if($linx=~m/\)$/);
 my $liny = write_tree_bb_rec($$rbra{"y"},$$rbra{"x"},$wmod);
 $liny .= $$rbra{"b"} if($liny=~m/\)$/);
 my $hdif = $$rbra{"xh"} - $$rbra{"yh"};
 my $lx = ($$rbra{"l"}-$hdif)/2;
 my $ly = ($$rbra{"l"}+$hdif)/2;
 if($lx<0){ $lx = $EPSILON; $ly = $$rbra{"l"};}
 if($ly<0){ $ly = $EPSILON; $lx = $$rbra{"l"};}
 printf "(%s:%.5f,%s:%.5f);\n",$linx,$lx,$liny,$ly;
 last if($rmod==0 or $rmod==3);
 $done = 1;
}

#---	clean ----------------------------------------------
# unlink <$Base.*> unless($DEBUG);

############################################################
#	walk_tree_bb($rbcu,$rnod)
############################################################
sub walk_tree_bb
{
 my $rbcu = shift;		# current branch
 my $rnod = shift;		# current downstream node

 my $endp = "x"; my $endd = "y";
 if($$rbcu{"x"} eq $rnod){ $endp = "y"; my $endd = "x";}
 my $rnop = $$rbcu{$endp};	# proximal node

 my $rbls = $$rnod{"br"};	# list of branches at the current downstream node

 if(@$rbls==1){			# current downstream node is terminal node
  # do <whatever>
  return;				# go back with whatever
 }

 foreach my $rbra (@$rbls){	# for each branch at the current downstream node
  my $curp = "x"; my $curd = "y";
  if($$rbra{"y"} eq $rnod){ $curp = "y"; my $curd = "x";}	# proximal and distal ends
  my $rnde = $$rbra{$curd};					# distal node
  next if($rnde eq $rnop);					# this branch goes back - ignore
  walk_tree_bb($rbra,$rnde);		# proceed to the interesting branch; do <whatever> there
 }
 # do <whatever>
}

############################################################
#	walk_tree_bb_dist($rbcu,$rnod)
############################################################
sub walk_tree_bb_dist
{
 my $rbcu = shift;		# current branch
 my $rnod = shift;		# current downstream node

 my $endp = "x"; my $endd = "y";
 if($$rbcu{"x"} eq $rnod){ $endp = "y"; $endd = "x";}
 my $rnop = $$rbcu{$endp};	# proximal node

 my $rbls = $$rnod{"br"};	# list of branches at the current downstream node
 	#printf "ENTER walk_tree_bb_count_leaves()\n";
 	#printf "\t%x\t%x\n",$rbcu,$rnod;
 	#printf "\t[%s]\t%x\n",$endp,$$rbcu{$endp};
 	#printf "\t[%s]\t%x\n",$endd,$$rbcu{$endd};

 if(@$rbls==1){			# current downstream node is terminal node
  $$rbcu{$endd."n"} = 1;		# count -  distal end of the branch
  $$rbcu{$endd."h"} = 0;		# height - distal end of the branch
  return;				# go back
 }

 my $numl = 0;			# zero counter for descendant leaves
 my $sumw = 0;			# zero counter for weights
 my $high = 0;			# zero counter for height
 foreach my $rbra (@$rbls){	# for each branch at the current downstream node
  my $curp = "x"; my $curd = "y";
  if($$rbra{"y"} eq $rnod){ $curp = "y"; $curd = "x";}		# proximal and distal ends
  my $rnde = $$rbra{$curd};					# distal node
  next if($rnde eq $rnop);					# this branch goes back - ignore
  walk_tree_bb_dist($rbra,$rnde) if($$rbra{$curd."n"} eq "");	# proceed to the distal end if not visited before
  $numl += $$rbra{$curd."n"};					# count descendant leaves
  my $wt = sqrt($$rbra{$curd."n"});				# wt = sqrt(n)
  $sumw += $wt;							# sum of weights
  $high += ($$rbra{"l"}+$$rbra{$curd."h"})*$wt;			# weighted height
 }
 $$rbcu{$endd."n"} = $numl;
 $$rbcu{$endd."h"} = $high/$sumw;
}

############################################################
#	write_tree_bb_rec($rnod,$rsrc,$flag)
############################################################
sub write_tree_bb_rec
{
 my $rnod = shift;
 my $rsrc = shift;
 my $flag = shift;

 my $rbls = $$rnod{"br"};
 my $line = "";

 if(@$rbls==1){			# terminal node
  return $$rnod{"n"};
 }
 
 foreach my $rbra (@$rbls){
  my $rnde = $$rbra{"x"}; $rnde = $$rbra{"y"} if($$rbra{"x"} eq $rnod);	# some descendant
  next if($rnde eq $rsrc);						# where you came from
  $line .= "," if($line ne "");
  $line .= write_tree_bb_rec($rnde,$rnod,$flag);
  $line .= $$rbra{"b"} if($$rbra{"b"} ne "" and $$rnde{"n"} eq "" and $flag&0x04);
  $line .= ":".$$rbra{"l"} if($$rbra{"l"} ne "" and $flag&0x02);
 }

 $line = "(".$line.")";
 return $line;
}

############################################################
#	calc_tbl_branch($rnod,$ttbl)
############################################################
sub calc_tbl_branch
{
 my $rnod = shift;
 my $ttbl = shift;

 my $rdes = $$rnod{"d"};
 
 foreach my $rnde (@$rdes){
  calc_tbl_branch($rnde,$ttbl);
 }

 my $rpar = $$rnod{"p"};
 return if($rpar eq "");	# root, no parent


 my $rbls = $$rnod{"br"};

 foreach my $rbra (@$rbls){
  my $ends = "x"; my $endn = "y";
  if($$rbra{$endn} eq $rnod){ $ends = "y"; $endn = "x";}
  next if($$rbra{$endn} ne $rpar);	# work with parent branch only
  my $blen = $$rbra{"l"};
  my $tbup = $$rnod{"tbl"};
  my $tbdn = $ttbl - $tbup - $blen;
  $$rbra{$ends."tbl"} = $tbup;
  $$rbra{$endn."tbl"} = $tbdn;
 }
}

############################################################
#	sort_branch($xxxx)
############################################################
sub sort_branch
{
 my $rdaa = shift;
 my $rdab = shift;

 my $desa = (1-$$rdaa{"diff"})*(1-$$rdaa{"difn"});
 my $desb = (1-$$rdab{"diff"})*(1-$$rdab{"difn"});

 return $$rdab{"root"}<=>$$rdaa{"root"} if($$rdab{"root"}!=$$rdaa{"root"});
 return $desb<=>$desa;
}
