#!/usr/bin/perl5.16

############################################################
#	Template:	0.3, November 04 2004
#	Parent Path:	/net/gloin/export/home/wolf/bin/???
############################################################

############################################################
#	System etc
############################################################
$Pver = "0.2";
$Pdat = "April 26 2017";

($Pnam) = ($0 =~ m/([^\/]+)$/);
($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

$Ppid = $$;	# Process ID
############################################################
#	Definitions
############################################################
$k1 = 1;
$k2 = 1;
$nbla = 0;
$icom = 1;
$ldeli1 = "\t"; $lch1 = "\t";
$ldeli2 = "\t"; $lch2 = "\t";
$jdelim = "\t";
$blank = "";
$charstop = "#";

############################################################
#	Global variables
############################################################
%tadd;

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam master-table -t=add-table [options]

Merges add-table to the master-table; 

Options:

	-t=file		add-table file (MANDATORY)

	-k1=n		use n-th field of the master as the data (default $k1)

	-k2=n		use n-th field of the addition as the data (default $k2)

	-blank=n	add n blank fields if the key not found (default 0)

	-nocomm		do NOT ignore lines starting with \"\#\"

	-s1=\"delim\"	delimiters to split line in master (default \"\\t\")

	-s2=\"delim\"	delimiters to split line in addition (default \"\\t\")

	-j=\"delim\"	delimiter to join line (default \"\\t\")
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
my_args(@ARGV);
-t STDIN and !@myGlobList and print $Instructions and exit 0;
push @myGlobList,"-" unless(-t STDIN);

$fadd = $myOptList{"t"} if($myOptList{"t"} ne "");
$k1 = int $myOptList{"k1"} if(int $myOptList{"k1"}>0);
$k2 = int $myOptList{"k2"} if(int $myOptList{"k2"}>0);
$nbla = int $myOptList{"blank"} if(int $myOptList{"blank"}>0);
$icom = 0 if(exists $myOptList{"nocomm"});
$ldeli1 = $myOptList{"s1"} if($myOptList{"s1"} ne "");
$ldeli2 = $myOptList{"s2"} if($myOptList{"s2"} ne "");
$jdelim = $myOptList{"j"} if($myOptList{"j"} ne "");

for(my $i=0;$i<$nbla;$i++){ $blank .= $jdelim;}		# blank template

$lch1 = ""; $lch2 = "";
for(my $i = 0;$i<128;$i++){
 my $char = chr $i;
 $lch1 = $char if($lch1 eq "" and $char=~m/$ldeli1/);
 $lch2 = $char if($lch2 eq "" and $char=~m/$ldeli2/);
}

#---	read the add table ---------------------------------
print STDERR "$Pnam:\tReading $fadd\n";
open HAND,"<$fadd" or die "Can't read \"$fadd\"";
while(<HAND>){
 chomp;
 next if(m/^\#/ and $icom);
 $_ .= $lch2.$charstop;				# add terminal element
 my @token = split/$ldeli2/;
 pop @token;					# remove terminal element
 my $kk = $token[$k2-1];
 splice @token,$k2-1,1;
 $tadd{$kk} = join $jdelim,@token if($tadd{$kk} eq "");
}
close HAND;

#---	read the master table ------------------------------
foreach my $fmas (@myGlobList){
 print STDERR "$Pnam:\tReading $fmas\n";
 open HAND,"<$fmas" or die "Can't read \"$fmas\"";
 while(<HAND>){
  chomp;
  if(m/^\#/ and $icom){ print "$_\n"; next;}
  $_ .= $lch1.$charstop;			# add terminal element
  my @token = split/$ldeli1/;
  pop @token;					# remove terminal element
  my $kk = $token[$k1-1];
  my $ad = $tadd{$kk};
  my $xx = join $jdelim,@token;
  print "$xx";
  if($ad ne ""){ print "$jdelim$ad";}
  else{ print "$blank";}
  print "\n";
 }
 close HAND;
}

############################################################
#	max min
############################################################
sub max
{
 my $max = shift;
 while(@_){
  my $x = shift;
  $max = $x if($x>$max);
 }
 return $max;
}

sub min
{
 my $min = shift;
 while(@_){
  my $x = shift;
  $min = $x if($x<$min);
 }
 return $min;
}


############################################################
#	my_args
############################################################
sub my_args
{
 my $nop = scalar @_;
 for($i=0;$i<$nop;$i++){
  if($_[$i]=~m/^-[^=]+=$/){
   my $new = $_[$i].$_[$i+1];
   splice @_,$i,2,$new;
  }
 }
 foreach my $arg (@_){
  my ($opt) = ($arg =~ m/^-(\w+)/);
  my ($val) = ($arg =~ m/^-\w+=(.*)/);
  if($opt){
   $myOptList{$opt} = $val;
  }else{
   push @myGlobList,$arg;
  }
 }
}
